{"version":3,"file":"bundle.cjs","sources":["../src/style/cell.ts","../src/style/core.ts","../src/style/row.ts","../src/formatters/checkboxFormatter.tsx","../src/hooks/useLayoutEffect.ts","../src/hooks/useFocusRef.ts","../src/DataGridDefaultComponentsProvider.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/valueFormatter.tsx","../src/formatters/toggleGroupFormatter.tsx","../src/hooks/useRowSelection.ts","../src/Columns.tsx","../src/utils/colSpanUtils.ts","../src/utils/domUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/renderMeasuringCells.tsx","../src/utils/selectedCellUtils.ts","../src/utils/styleUtils.ts","../src/utils/index.ts","../src/hooks/useCalculatedColumns.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingCellRef.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/headerRenderer.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/EditCell.tsx","../src/DragHandle.tsx","../src/sortStatus.tsx","../src/DataGrid.tsx","../src/editors/textEditor.tsx"],"sourcesContent":["import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /*\n    Cannot use these because of a Chromium bug:\n    https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n    once this is fixed we can also remove \"position: relative:\"\n    contain: strict;\n    */\n    position: relative; /* needed for absolute positioning to work */\n    contain: size style;\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\n// max-content does not work when size containment is enabled\n// `contain: content` leads to odd subpixel mismatches when combined with colSpan\nexport const autosizeColumnsClassname = css`\n  @layer rdg.Root {\n    .${cell} {\n      contain: style;\n    }\n  }\n`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  @layer rdg.Cell {\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  }\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg {\n    @layer Defaults,\n      FocusSink,\n      Cell,\n      HeaderCell,\n      SummaryCell,\n      EditCell,\n      Row,\n      HeaderRow,\n      SummaryRow,\n      GroupedRow,\n      Root;\n\n    @layer Defaults {\n      *,\n      *::before,\n      *::after {\n        box-sizing: inherit;\n      }\n    }\n\n    @layer Root {\n      ${lightTheme}\n      --rdg-selection-color: #66afe9;\n      --rdg-font-size: 14px;\n\n      display: grid;\n\n      color-scheme: var(--rdg-color-scheme, light dark);\n\n      /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n      /* We set a stacking context so internal elements don't render on top of external elements. */\n      contain: strict;\n      content-visibility: auto;\n      block-size: 350px;\n      border: 1px solid var(--rdg-border-color);\n      box-sizing: border-box;\n      overflow: auto;\n      background-color: var(--rdg-background-color);\n      color: var(--rdg-color);\n      font-size: var(--rdg-font-size);\n\n      /* needed on Firefox */\n      &::before {\n        content: '';\n        grid-column: 1/-1;\n        grid-row: 1/-1;\n      }\n\n      &.rdg-dark {\n        --rdg-color-scheme: dark;\n        ${darkTheme}\n      }\n\n      &.rdg-light {\n        --rdg-color-scheme: light;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        &:not(.rdg-light) {\n          ${darkTheme}\n        }\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 2 to show up above header row */\n    z-index: 3;\n  }\n`;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected`;\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport type { CheckboxFormatterProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function checkboxFormatter(\n  { onChange, ...props }: CheckboxFormatterProps,\n  ref: React.RefObject<HTMLInputElement>\n) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        ref={ref}\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Renderers, Maybe } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultComponentsContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultComponentsProvider = DataGridDefaultComponentsContext.Provider;\n\nexport function useDefaultComponents<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultComponentsContext);\n}\n","import { useFocusRef } from '../hooks/useFocusRef';\nimport { useDefaultComponents } from '../DataGridDefaultComponentsProvider';\nimport type { CheckboxFormatterProps } from '../types';\n\ntype SharedInputProps = Pick<CheckboxFormatterProps, 'disabled' | 'aria-label' | 'aria-labelledby'>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n  const checkboxFormatter = useDefaultComponents()!.checkboxFormatter!;\n\n  return (\n    <>\n      {checkboxFormatter(\n        {\n          'aria-label': ariaLabel,\n          'aria-labelledby': ariaLabelledBy,\n          tabIndex,\n          disabled,\n          checked: value,\n          onChange\n        },\n        ref\n      )}\n    </>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function valueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function toggleGroupFormatter<R, SR>(props: GroupFormatterProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter(props) {\n    return <SelectFormatter {...props} />;\n  },\n  groupFormatter(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<HTMLDivElement>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>({\n  viewportColumns\n}: {\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n}) {\n  return (\n    <>\n      {viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n        <div\n          key={key}\n          className={measuringCellClassname}\n          style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n          data-measuring-cell-key={key}\n        />\n      ))}\n    </>\n  );\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, round, floor, sign, abs, ceil } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { valueFormatter, toggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { clampColumnWidth, max, min } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 80;\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? valueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= toggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable,\n    rawGroupBy\n  ]);\n\n  const { layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n\n    for (const column of columns) {\n      let width = columnWidths.get(column.key) ?? column.width;\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns += `${width}px `;\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      gridTemplateColumns: templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nimport { ceil } from '../utils';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number,\n  isWidthInitialized: boolean\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [isWidthInitialized, setWidthInitialized] = useState(false);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(handleDevicePixelRatio(initialWidth));\n    setBlockSize(initialHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      setInlineSize(handleDevicePixelRatio(size.inlineSize));\n      setBlockSize(size.blockSize);\n      setWidthInitialized(true);\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, isWidthInitialized];\n}\n\n// TODO: remove once fixed upstream\n// we reduce width by 1px here to avoid layout issues in Chrome\n// https://bugs.chromium.org/p/chromium/issues/detail?id=1206298\nfunction handleDevicePixelRatio(size: number) {\n  return size - (devicePixelRatio === 1 ? 0 : ceil(devicePixelRatio));\n}\n","import { useRef, useEffect, useCallback } from 'react';\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useCallback, useState } from 'react';\nimport { scrollIntoView } from '../utils';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  const ref = useCallback((cell: HTMLDivElement | null) => {\n    if (cell === null) return;\n    scrollIntoView(cell);\n    if (cell.contains(document.activeElement)) return;\n    cell.focus({ preventScroll: true });\n  }, []);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused;\n\n  return {\n    ref: isSelected ? ref : undefined,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  columnWidths: ReadonlyMap<string, number>;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  columnWidths,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  const { viewportColumns, flexWidthViewportColumns } = useMemo((): {\n    viewportColumns: readonly CalculatedColumn<R, SR>[];\n    flexWidthViewportColumns: readonly CalculatedColumn<R, SR>[];\n  } => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    const flexWidthViewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n      if (typeof column.width === 'string') {\n        flexWidthViewportColumns.push(column);\n      }\n    }\n\n    return { viewportColumns, flexWidthViewportColumns };\n  }, [startIdx, colOverscanEndIdx, columns]);\n\n  const unsizedFlexWidthViewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    return flexWidthViewportColumns.filter((column) => !columnWidths.has(column.key));\n  }, [flexWidthViewportColumns, columnWidths]);\n\n  return {\n    viewportColumns,\n    flexWidthViewportColumns: unsizedFlexWidthViewportColumns\n  };\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport { useFocusRef } from './hooks';\nimport type { HeaderRendererProps } from './types';\nimport { useDefaultComponents } from './DataGridDefaultComponentsProvider';\n\nconst headerSortCell = css`\n  @layer rdg.SortableHeaderCell {\n    cursor: pointer;\n    display: flex;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function headerRenderer<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  isCellSelected\n}: HeaderRendererProps<R, SR>) {\n  if (!column.sortable) return <>{column.name}</>;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      isCellSelected={isCellSelected}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: SortableHeaderCellProps<R, SR>) {\n  const sortStatus = useDefaultComponents<R, SR>()!.sortStatus!;\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{sortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultHeaderRenderer from './headerRenderer';\nimport { getCellStyle, getCellClassname, clampColumnWidth } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n\n    &::after {\n      content: '';\n      cursor: col-resize;\n      position: absolute;\n      inset-block-start: 0;\n      inset-inline-end: 0;\n      inset-block-end: 0;\n      inline-size: 10px;\n    }\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const headerRenderer = column.headerRenderer ?? defaultHeaderRenderer;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      // prevents text selection in Chrome, which fixes scrolling the grid while dragging, and fixes re-size on an autosized column\n      event.preventDefault();\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {headerRenderer({\n        column,\n        sortDirection,\n        priority,\n        onSort,\n        allRowsSelected,\n        onAllRowsSelectionChange,\n        isCellSelected\n      })}\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn, Direction } from './types';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { cell, cellFrozen, rowSelectedClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 0 to show up above regular cells */\n      z-index: 1;\n      position: sticky;\n      inset-block-start: 0;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          {column.formatter({\n            column,\n            row,\n            isCellSelected,\n            onRowChange: handleRowChange\n          })}\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRowRenderer<R, SR>(key: React.Key, props: RowRendererProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) &&\n        column.groupFormatter?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          isCellSelected,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.summaryFormatter?.({ column, row, isCellSelected })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport { getColSpan, getRowStyle } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<\n  RowRendererProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  lastTopRowIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 1;\n    }\n\n    > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst topSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-end: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst bottomSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-start: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  lastTopRowIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  const isTop = lastTopRowIdx !== undefined;\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && lastTopRowIdx === rowIdx,\n          [bottomSummaryRowBorderClassname]: !isTop && rowIdx === 0,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation } from './utils';\nimport type { CellRendererProps, EditorProps, Omit } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<EditorProps<R, SR>, 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  closeEditor: () => void;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  closeEditor\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (event.key === 'Escape') {\n      event.stopPropagation();\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      event.stopPropagation();\n      onClose(true);\n    } else {\n      const onNavigation = column.editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) {\n        event.stopPropagation();\n      }\n    }\n  }\n\n  function onClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      onRowChange(row, true);\n    } else {\n      closeEditor();\n    }\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={onKeyDown}\n      onMouseDownCapture={commitOnOutsideClick ? cancelFrameRequest : undefined}\n    >\n      {column.editor != null && (\n        <>\n          {column.editor({\n            column,\n            row,\n            onRowChange,\n            onClose\n          })}\n          {column.editorOptions?.renderFormatter &&\n            column.formatter({ column, row, isCellSelected: true, onRowChange })}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    cursor: move;\n    position: absolute;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 8px;\n    block-size: 8px;\n    background-color: var(--rdg-selection-color);\n\n    &:hover {\n      inline-size: 16px;\n      block-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { css } from '@linaria/core';\nimport type { SortStatusProps, SortIconProps, SortPriorityProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function sortStatus({ sortDirection, priority }: SortStatusProps) {\n  return (\n    <>\n      {sortIcon({ sortDirection })}\n      {sortPriority({ priority })}\n    </>\n  );\n}\n\nexport function sortIcon({ sortDirection }: SortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function sortPriority({ priority }: SortPriorityProps) {\n  return priority;\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  rootClassname,\n  viewportDraggingClassname,\n  focusSinkClassname,\n  autosizeColumnsClassname,\n  rowSelected,\n  rowSelectedWithFrozenCell\n} from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport { defaultRowRenderer } from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport { default as defaultSortStatus } from './sortStatus';\nimport { checkboxFormatter as defaultCheckboxFormatter } from './formatters';\nimport {\n  DataGridDefaultComponentsProvider,\n  useDefaultComponents\n} from './DataGridDefaultComponentsProvider';\nimport {\n  assertIsValidKeyGetter,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  sign,\n  abs,\n  getSelectedCellColSpan,\n  renderMeasuringCells,\n  scrollIntoView\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  CopyEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe,\n  Renderers,\n  Direction\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  const defaultComponents = useDefaultComponents<R, SR>();\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const rowRenderer =\n    renderers?.rowRenderer ?? defaultComponents?.rowRenderer ?? defaultRowRenderer;\n  const sortStatus = renderers?.sortStatus ?? defaultComponents?.sortStatus ?? defaultSortStatus;\n  const checkboxFormatter =\n    renderers?.checkboxFormatter ??\n    defaultComponents?.checkboxFormatter ??\n    defaultCheckboxFormatter;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultComponents?.noRowsFallback;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ??= true;\n  direction ??= 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [autoResizeColumn, setAutoResizeColumn] = useState<CalculatedColumn<R, SR> | null>(null);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight, isWidthInitialized] = useGridDimensions();\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      sortStatus,\n      checkboxFormatter\n    }),\n    [sortStatus, checkboxFormatter]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const { viewportColumns, flexWidthViewportColumns } = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    columnWidths,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onRowClickLatest = useLatestFunc(onRowClick);\n  const onRowDoubleClickLatest = useLatestFunc(onRowDoubleClick);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: minRowIdx, idx });\n  });\n  const selectTopSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = topSummaryRows!.indexOf(summaryRow);\n      selectCell({ rowIdx: rowIdx + minRowIdx + 1, idx: column.idx });\n    }\n  );\n  const selectBottomSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = bottomSummaryRows!.indexOf(summaryRow) + rows.length;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  );\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n      scrollIntoView(rowRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!isWidthInitialized || flexWidthViewportColumns.length === 0) return;\n\n    setColumnWidths((columnWidths) => {\n      const newColumnWidths = new Map(columnWidths);\n      const grid = gridRef.current!;\n\n      for (const column of flexWidthViewportColumns) {\n        const measuringCell = grid.querySelector(`[data-measuring-cell-key=\"${column.key}\"]`)!;\n        // Set the actual width of the column after it is rendered\n        const { width } = measuringCell.getBoundingClientRect();\n        newColumnWidths.set(column.key, width);\n      }\n\n      return newColumnWidths;\n    });\n  }, [isWidthInitialized, flexWidthViewportColumns, gridRef]);\n\n  useLayoutEffect(() => {\n    if (autoResizeColumn === null) return;\n    const measuringCell = gridRef.current!.querySelector(\n      `[data-measuring-cell-key=\"${autoResizeColumn.key}\"]`\n    )!;\n    const { width } = measuringCell.getBoundingClientRect();\n    setColumnWidths((columnWidths) => {\n      const newColumnWidths = new Map(columnWidths);\n      newColumnWidths.set(autoResizeColumn.key, width);\n      return newColumnWidths;\n    });\n    setAutoResizeColumn(null);\n    onColumnResize?.(autoResizeColumn.idx, width);\n  }, [autoResizeColumn, gridRef, onColumnResize]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn,\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R, SR>, width: number | 'max-content') => {\n      if (width === 'max-content') {\n        setAutoResizeColumn(column);\n        return;\n      }\n      setColumnWidths((columnWidths) => {\n        const newColumnWidths = new Map(columnWidths);\n        newColumnWidths.set(column.key, width);\n        return newColumnWidths;\n      });\n\n      onColumnResize?.(column.idx, width);\n    },\n    [onColumnResize]\n  );\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n    const { rowIdx } = selectedPosition;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx]) &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (\n        isGroupRow(row) &&\n        selectedPosition.idx === -1 &&\n        // Collapse the current group row if it is focused and is in expanded state\n        ((key === leftKey && row.isExpanded) ||\n          // Expand the current group row if it is focused and is in collapsed state\n          (key === rightKey && !row.isExpanded))\n      ) {\n        event.preventDefault(); // Prevents scrolling\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(gridRef.current?.querySelector('[tabindex=\"0\"]'));\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function scrollToColumn(idx: number): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (idx > lastFrozenColumnIndex) {\n      const { rowIdx } = selectedPosition;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      const sign = isRtl ? -1 : 1;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = (left - totalFrozenColumnWidth) * sign;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = (right - clientWidth) * sign;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getLayoutCssVars() {\n    if (autoResizeColumn === null && flexWidthViewportColumns.length === 0) return layoutCssVars;\n    const { gridTemplateColumns } = layoutCssVars;\n    const newSizes = gridTemplateColumns.split(' ');\n    if (autoResizeColumn !== null) {\n      newSizes[autoResizeColumn.idx] = 'max-content';\n    }\n    for (const column of flexWidthViewportColumns) {\n      newSizes[column.idx] = column.width as string;\n    }\n\n    return {\n      ...layoutCssVars,\n      gridTemplateColumns: newSizes.join(' ')\n    };\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = () => {\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges?: boolean) => {\n      if (commitChanges) {\n        updateRow(column, selectedPosition.rowIdx, row);\n        closeEditor();\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor();\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (\n      // idx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerRowsCount + topSummaryRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + topSummaryRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        rowRenderer(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex':\n            headerRowsCount + topSummaryRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onRowClick: onRowClickLatest,\n          onRowDoubleClick: onRowDoubleClickLatest,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectViewportCellLatest,\n          selectedCellDragHandle: getDragHandle(rowIdx),\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== -2;\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging,\n          [autosizeColumnsClassname]:\n            autoResizeColumn !== null || flexWidthViewportColumns.length > 0\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            selectedPosition.rowIdx >= 0 && selectedPosition.rowIdx < rows.length\n              ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...getLayoutCssVars()\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + 2\n          }}\n          onKeyDown={handleKeyDown}\n        />\n      )}\n      <DataGridDefaultComponentsProvider value={defaultGridComponents}>\n        <HeaderRow\n          columns={getRowViewportColumns(-1)}\n          onColumnResize={handleColumnResize}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={selectAllRowsLatest}\n          sortColumns={sortColumns}\n          onSortColumnsChange={onSortColumnsChangeLatest}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          selectedCellIdx={selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined}\n          selectCell={selectHeaderCellLatest}\n          shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n          direction={direction}\n        />\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + rowIdx + 1;\n              const summaryRowIdx = rowIdx + minRowIdx + 1;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={gridRowStart}\n                  key={rowIdx}\n                  rowIdx={rowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  lastTopRowIdx={topSummaryRowsCount - 1}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  selectCell={selectTopSummaryCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + topSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={headerRowsCount + topSummaryRowsCount + rowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={rowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  lastTopRowIdx={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  selectCell={selectBottomSummaryCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n\n        {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n        {renderMeasuringCells({ viewportColumns })}\n      </DataGridDefaultComponentsProvider>\n    </div>\n  );\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["cell","cellClassname","autosizeColumnsClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","root","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","row","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","checkboxFormatter","onChange","props","ref","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","clsx","disabled","_jsx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","useRef","current","focus","preventScroll","tabIndex","DataGridDefaultComponentsContext","createContext","undefined","DataGridDefaultComponentsProvider","Provider","useDefaultComponents","useContext","SelectCellFormatter","value","isCellSelected","ariaLabel","ariaLabelledBy","_Fragment","valueFormatter","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","toggleGroupFormatter","ToggleGroup","groupKey","isExpanded","toggleGroup","handleKeyDown","d","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","Error","SELECT_COLUMN_KEY","SelectFormatter","isRowSelected","onRowSelectionChange","isShiftClick","SelectGroupFormatter","SelectColumn","name","width","minWidth","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","groupFormatter","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","idx","scrollIntoView","element","inline","block","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","event","has","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","measuringCellClassname","renderMeasuringCells","viewportColumns","map","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","topSummaryRowsCount","length","minRowIdx","type","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","getRowStyle","height","getCellStyle","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","isLastFrozenColumn","min","max","round","floor","sign","abs","ceil","Math","assertIsValidKeyGetter","keyGetter","clampColumnWidth","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","rawColumn","includes","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","templateColumns","get","set","columnMetric","gridTemplateColumns","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useGridDimensions","gridRef","inlineSize","setInlineSize","useState","blockSize","setBlockSize","isWidthInitialized","setWidthInitialized","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","getBoundingClientRect","initialWidth","initialHeight","handleDevicePixelRatio","resizeObserver","entries","size","contentBoxSize","observe","disconnect","devicePixelRatio","useLatestFunc","fn","callbackFn","useCallback","useRovingCellRef","isChildFocused","setIsChildFocused","contains","document","activeElement","onFocus","currentTarget","isFocused","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","flexWidthViewportColumns","unsizedFlexWidthViewportColumns","filter","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","groupRow","setSize","add","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","sortDirection","priority","onSort","SortableHeaderCell","children","sortStatus","preventDefault","handleClick","cellResizable","cellResizableClassname","HeaderCell","onColumnResize","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","isRtl","sortIndex","findIndex","columnKey","sortColumn","ariaSort","className","headerCellClass","defaultHeaderRenderer","onPointerDown","pointerType","buttons","pointerId","right","clientX","onPointerMove","onLostPointerCapture","removeEventListener","setPointerCapture","addEventListener","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","onClick","onDoubleClick","handleFocus","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onRowClick","onRowDoubleClick","onRowChange","cellClass","selectCellWrapper","openEditor","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","handleRowChange","newRow","Row","gridRowStart","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","handleDragEnter","RowComponent","forwardRef","defaultRowRenderer","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","groupRowClassname","GroupedRow","selectGroup","handleSelectGroup","summaryCellClassname","SummaryCell","summaryCellClass","summaryFormatter","summaryRow","topSummaryRow","topSummaryRowBorderClassname","bottomSummaryRowBorderClassname","summaryRowClassname","topSummaryRowClassname","SummaryRow","bottom","lastTopRowIdx","ariaRowIndex","isTop","cellEditing","EditCell","closeEditor","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","onKeyDown","stopPropagation","onNavigation","commitChanges","renderFormatter","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","endRowIndex","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","arrow","arrowClassname","sortIcon","sortPriority","initialPosition","mode","DataGrid","rowKeyGetter","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onScroll","onCopy","onPaste","rawCellNavigationMode","renderers","style","ariaDescribedBy","testId","defaultComponents","rowRenderer","defaultSortStatus","defaultCheckboxFormatter","noRowsFallback","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","autoResizeColumn","setAutoResizeColumn","prevSelectedPosition","lastSelectedRowIdx","rowRef","gridWidth","gridHeight","headerRowsCount","bottomSummaryRowsCount","summaryRowsCount","isSelectable","leftKey","rightKey","defaultGridComponents","every","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","onSortColumnsChangeLatest","onRowClickLatest","onRowDoubleClickLatest","selectRowLatest","selectRow","selectAllRowsLatest","selectAllRows","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","selectTopSummaryCellLatest","selectBottomSummaryCellLatest","toggleGroupLatest","isSamePosition","newColumnWidths","grid","measuringCell","querySelector","useImperativeHandle","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newSelectedRows","childRow","rowKey","delete","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","closest","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","isRowIdxWithinViewportBounds","navigate","handleCellInput","handleScroll","flushSync","getRawRowIdx","rawRowIdx","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","targetColumnKey","onCellKeyDown","isDefaultPrevented","originalRow","isColIdxWithinSelectionBounds","isCellAtLeftBoundary","isCellAtRightBoundary","getNextPosition","parentRowIdx","parentRow","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getLayoutCssVars","newSizes","split","join","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","isGroupRowSelected","cr","c","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","summaryRowIdx","isSummaryRowSelected","p1","p2","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor"],"mappings":"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"}