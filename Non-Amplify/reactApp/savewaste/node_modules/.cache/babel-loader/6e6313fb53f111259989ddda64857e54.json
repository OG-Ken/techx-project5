{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"fixed\"];\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport toArray from \"rc-util/es/Children/toArray\";\nimport { INTERNAL_COL_DEFINE } from '../utils/legacyUtil';\nimport { EXPAND_COLUMN } from '../constant';\nexport function convertChildrenToColumns(children) {\n  return toArray(children).filter(function (node) {\n    return /*#__PURE__*/React.isValidElement(node);\n  }).map(function (_ref) {\n    var key = _ref.key,\n        props = _ref.props;\n\n    var nodeChildren = props.children,\n        restProps = _objectWithoutProperties(props, _excluded);\n\n    var column = _objectSpread({\n      key: key\n    }, restProps);\n\n    if (nodeChildren) {\n      column.children = convertChildrenToColumns(nodeChildren);\n    }\n\n    return column;\n  });\n}\n\nfunction flatColumns(columns) {\n  return columns.reduce(function (list, column) {\n    var fixed = column.fixed; // Convert `fixed='true'` to `fixed='left'` instead\n\n    var parsedFixed = fixed === true ? 'left' : fixed;\n    var subColumns = column.children;\n\n    if (subColumns && subColumns.length > 0) {\n      return [].concat(_toConsumableArray(list), _toConsumableArray(flatColumns(subColumns).map(function (subColum) {\n        return _objectSpread({\n          fixed: parsedFixed\n        }, subColum);\n      })));\n    }\n\n    return [].concat(_toConsumableArray(list), [_objectSpread(_objectSpread({}, column), {}, {\n      fixed: parsedFixed\n    })]);\n  }, []);\n}\n\nfunction warningFixed(flattenColumns) {\n  var allFixLeft = true;\n\n  for (var i = 0; i < flattenColumns.length; i += 1) {\n    var col = flattenColumns[i];\n\n    if (allFixLeft && col.fixed !== 'left') {\n      allFixLeft = false;\n    } else if (!allFixLeft && col.fixed === 'left') {\n      warning(false, \"Index \".concat(i - 1, \" of `columns` missing `fixed='left'` prop.\"));\n      break;\n    }\n  }\n\n  var allFixRight = true;\n\n  for (var _i = flattenColumns.length - 1; _i >= 0; _i -= 1) {\n    var _col = flattenColumns[_i];\n\n    if (allFixRight && _col.fixed !== 'right') {\n      allFixRight = false;\n    } else if (!allFixRight && _col.fixed === 'right') {\n      warning(false, \"Index \".concat(_i + 1, \" of `columns` missing `fixed='right'` prop.\"));\n      break;\n    }\n  }\n}\n\nfunction revertForRtl(columns) {\n  return columns.map(function (column) {\n    var fixed = column.fixed,\n        restProps = _objectWithoutProperties(column, _excluded2); // Convert `fixed='left'` to `fixed='right'` instead\n\n\n    var parsedFixed = fixed;\n\n    if (fixed === 'left') {\n      parsedFixed = 'right';\n    } else if (fixed === 'right') {\n      parsedFixed = 'left';\n    }\n\n    return _objectSpread({\n      fixed: parsedFixed\n    }, restProps);\n  });\n}\n/**\n * Parse `columns` & `children` into `columns`.\n */\n\n\nfunction useColumns(_ref2, transformColumns) {\n  var prefixCls = _ref2.prefixCls,\n      columns = _ref2.columns,\n      children = _ref2.children,\n      expandable = _ref2.expandable,\n      expandedKeys = _ref2.expandedKeys,\n      columnTitle = _ref2.columnTitle,\n      getRowKey = _ref2.getRowKey,\n      onTriggerExpand = _ref2.onTriggerExpand,\n      expandIcon = _ref2.expandIcon,\n      rowExpandable = _ref2.rowExpandable,\n      expandIconColumnIndex = _ref2.expandIconColumnIndex,\n      direction = _ref2.direction,\n      expandRowByClick = _ref2.expandRowByClick,\n      columnWidth = _ref2.columnWidth,\n      fixed = _ref2.fixed;\n  var baseColumns = React.useMemo(function () {\n    return columns || convertChildrenToColumns(children);\n  }, [columns, children]); // ========================== Expand ==========================\n\n  var withExpandColumns = React.useMemo(function () {\n    if (expandable) {\n      var _expandColumn;\n\n      var cloneColumns = baseColumns.slice(); // >>> Warning if use `expandIconColumnIndex`\n\n      if (process.env.NODE_ENV !== 'production' && expandIconColumnIndex >= 0) {\n        warning(false, '`expandIconColumnIndex` is deprecated. Please use `Table.EXPAND_COLUMN` in `columns` instead.');\n      } // >>> Insert expand column if not exist\n\n\n      if (!cloneColumns.includes(EXPAND_COLUMN)) {\n        var expandColIndex = expandIconColumnIndex || 0;\n\n        if (expandColIndex >= 0) {\n          cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);\n        }\n      } // >>> Deduplicate additional expand column\n\n\n      if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(function (c) {\n        return c === EXPAND_COLUMN;\n      }).length > 1) {\n        warning(false, 'There exist more than one `EXPAND_COLUMN` in `columns`.');\n      }\n\n      var expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);\n      cloneColumns = cloneColumns.filter(function (column, index) {\n        return column !== EXPAND_COLUMN || index === expandColumnIndex;\n      }); // >>> Check if expand column need to fixed\n\n      var prevColumn = baseColumns[expandColumnIndex];\n      var fixedColumn;\n\n      if ((fixed === 'left' || fixed) && !expandIconColumnIndex) {\n        fixedColumn = 'left';\n      } else if ((fixed === 'right' || fixed) && expandIconColumnIndex === baseColumns.length) {\n        fixedColumn = 'right';\n      } else {\n        fixedColumn = prevColumn ? prevColumn.fixed : null;\n      } // >>> Create expandable column\n\n\n      var expandColumn = (_expandColumn = {}, _defineProperty(_expandColumn, INTERNAL_COL_DEFINE, {\n        className: \"\".concat(prefixCls, \"-expand-icon-col\"),\n        columnType: 'EXPAND_COLUMN'\n      }), _defineProperty(_expandColumn, \"title\", columnTitle), _defineProperty(_expandColumn, \"fixed\", fixedColumn), _defineProperty(_expandColumn, \"className\", \"\".concat(prefixCls, \"-row-expand-icon-cell\")), _defineProperty(_expandColumn, \"width\", columnWidth), _defineProperty(_expandColumn, \"render\", function render(_, record, index) {\n        var rowKey = getRowKey(record, index);\n        var expanded = expandedKeys.has(rowKey);\n        var recordExpandable = rowExpandable ? rowExpandable(record) : true;\n        var icon = expandIcon({\n          prefixCls: prefixCls,\n          expanded: expanded,\n          expandable: recordExpandable,\n          record: record,\n          onExpand: onTriggerExpand\n        });\n\n        if (expandRowByClick) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            }\n          }, icon);\n        }\n\n        return icon;\n      }), _expandColumn);\n      return cloneColumns.map(function (col) {\n        return col === EXPAND_COLUMN ? expandColumn : col;\n      });\n    }\n\n    if (process.env.NODE_ENV !== 'production' && baseColumns.includes(EXPAND_COLUMN)) {\n      warning(false, '`expandable` is not config but there exist `EXPAND_COLUMN` in `columns`.');\n    }\n\n    return baseColumns.filter(function (col) {\n      return col !== EXPAND_COLUMN;\n    });\n  }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction]); // ========================= Transform ========================\n\n  var mergedColumns = React.useMemo(function () {\n    var finalColumns = withExpandColumns;\n\n    if (transformColumns) {\n      finalColumns = transformColumns(finalColumns);\n    } // Always provides at least one column for table display\n\n\n    if (!finalColumns.length) {\n      finalColumns = [{\n        render: function render() {\n          return null;\n        }\n      }];\n    }\n\n    return finalColumns;\n  }, [transformColumns, withExpandColumns, direction]); // ========================== Flatten =========================\n\n  var flattenColumns = React.useMemo(function () {\n    if (direction === 'rtl') {\n      return revertForRtl(flatColumns(mergedColumns));\n    }\n\n    return flatColumns(mergedColumns);\n  }, [mergedColumns, direction]); // Only check out of production since it's waste for each render\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningFixed(direction === 'rtl' ? flattenColumns.slice().reverse() : flattenColumns);\n  }\n\n  return [mergedColumns, flattenColumns];\n}\n\nexport default useColumns;","map":{"version":3,"names":["_defineProperty","_toConsumableArray","_objectSpread","_objectWithoutProperties","_excluded","_excluded2","React","warning","toArray","INTERNAL_COL_DEFINE","EXPAND_COLUMN","convertChildrenToColumns","children","filter","node","isValidElement","map","_ref","key","props","nodeChildren","restProps","column","flatColumns","columns","reduce","list","fixed","parsedFixed","subColumns","length","concat","subColum","warningFixed","flattenColumns","allFixLeft","i","col","allFixRight","_i","_col","revertForRtl","useColumns","_ref2","transformColumns","prefixCls","expandable","expandedKeys","columnTitle","getRowKey","onTriggerExpand","expandIcon","rowExpandable","expandIconColumnIndex","direction","expandRowByClick","columnWidth","baseColumns","useMemo","withExpandColumns","_expandColumn","cloneColumns","slice","process","env","NODE_ENV","includes","expandColIndex","splice","c","expandColumnIndex","indexOf","index","prevColumn","fixedColumn","expandColumn","className","columnType","render","_","record","rowKey","expanded","has","recordExpandable","icon","onExpand","createElement","onClick","e","stopPropagation","mergedColumns","finalColumns","reverse"],"sources":["C:/Users/kmath/Documents/Booz/nachoProblem/techx-project5/reactApp/savewaste/node_modules/rc-table/es/hooks/useColumns.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"fixed\"];\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport toArray from \"rc-util/es/Children/toArray\";\nimport { INTERNAL_COL_DEFINE } from '../utils/legacyUtil';\nimport { EXPAND_COLUMN } from '../constant';\nexport function convertChildrenToColumns(children) {\n  return toArray(children).filter(function (node) {\n    return /*#__PURE__*/React.isValidElement(node);\n  }).map(function (_ref) {\n    var key = _ref.key,\n        props = _ref.props;\n\n    var nodeChildren = props.children,\n        restProps = _objectWithoutProperties(props, _excluded);\n\n    var column = _objectSpread({\n      key: key\n    }, restProps);\n\n    if (nodeChildren) {\n      column.children = convertChildrenToColumns(nodeChildren);\n    }\n\n    return column;\n  });\n}\n\nfunction flatColumns(columns) {\n  return columns.reduce(function (list, column) {\n    var fixed = column.fixed; // Convert `fixed='true'` to `fixed='left'` instead\n\n    var parsedFixed = fixed === true ? 'left' : fixed;\n    var subColumns = column.children;\n\n    if (subColumns && subColumns.length > 0) {\n      return [].concat(_toConsumableArray(list), _toConsumableArray(flatColumns(subColumns).map(function (subColum) {\n        return _objectSpread({\n          fixed: parsedFixed\n        }, subColum);\n      })));\n    }\n\n    return [].concat(_toConsumableArray(list), [_objectSpread(_objectSpread({}, column), {}, {\n      fixed: parsedFixed\n    })]);\n  }, []);\n}\n\nfunction warningFixed(flattenColumns) {\n  var allFixLeft = true;\n\n  for (var i = 0; i < flattenColumns.length; i += 1) {\n    var col = flattenColumns[i];\n\n    if (allFixLeft && col.fixed !== 'left') {\n      allFixLeft = false;\n    } else if (!allFixLeft && col.fixed === 'left') {\n      warning(false, \"Index \".concat(i - 1, \" of `columns` missing `fixed='left'` prop.\"));\n      break;\n    }\n  }\n\n  var allFixRight = true;\n\n  for (var _i = flattenColumns.length - 1; _i >= 0; _i -= 1) {\n    var _col = flattenColumns[_i];\n\n    if (allFixRight && _col.fixed !== 'right') {\n      allFixRight = false;\n    } else if (!allFixRight && _col.fixed === 'right') {\n      warning(false, \"Index \".concat(_i + 1, \" of `columns` missing `fixed='right'` prop.\"));\n      break;\n    }\n  }\n}\n\nfunction revertForRtl(columns) {\n  return columns.map(function (column) {\n    var fixed = column.fixed,\n        restProps = _objectWithoutProperties(column, _excluded2); // Convert `fixed='left'` to `fixed='right'` instead\n\n\n    var parsedFixed = fixed;\n\n    if (fixed === 'left') {\n      parsedFixed = 'right';\n    } else if (fixed === 'right') {\n      parsedFixed = 'left';\n    }\n\n    return _objectSpread({\n      fixed: parsedFixed\n    }, restProps);\n  });\n}\n/**\n * Parse `columns` & `children` into `columns`.\n */\n\n\nfunction useColumns(_ref2, transformColumns) {\n  var prefixCls = _ref2.prefixCls,\n      columns = _ref2.columns,\n      children = _ref2.children,\n      expandable = _ref2.expandable,\n      expandedKeys = _ref2.expandedKeys,\n      columnTitle = _ref2.columnTitle,\n      getRowKey = _ref2.getRowKey,\n      onTriggerExpand = _ref2.onTriggerExpand,\n      expandIcon = _ref2.expandIcon,\n      rowExpandable = _ref2.rowExpandable,\n      expandIconColumnIndex = _ref2.expandIconColumnIndex,\n      direction = _ref2.direction,\n      expandRowByClick = _ref2.expandRowByClick,\n      columnWidth = _ref2.columnWidth,\n      fixed = _ref2.fixed;\n  var baseColumns = React.useMemo(function () {\n    return columns || convertChildrenToColumns(children);\n  }, [columns, children]); // ========================== Expand ==========================\n\n  var withExpandColumns = React.useMemo(function () {\n    if (expandable) {\n      var _expandColumn;\n\n      var cloneColumns = baseColumns.slice(); // >>> Warning if use `expandIconColumnIndex`\n\n      if (process.env.NODE_ENV !== 'production' && expandIconColumnIndex >= 0) {\n        warning(false, '`expandIconColumnIndex` is deprecated. Please use `Table.EXPAND_COLUMN` in `columns` instead.');\n      } // >>> Insert expand column if not exist\n\n\n      if (!cloneColumns.includes(EXPAND_COLUMN)) {\n        var expandColIndex = expandIconColumnIndex || 0;\n\n        if (expandColIndex >= 0) {\n          cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);\n        }\n      } // >>> Deduplicate additional expand column\n\n\n      if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(function (c) {\n        return c === EXPAND_COLUMN;\n      }).length > 1) {\n        warning(false, 'There exist more than one `EXPAND_COLUMN` in `columns`.');\n      }\n\n      var expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);\n      cloneColumns = cloneColumns.filter(function (column, index) {\n        return column !== EXPAND_COLUMN || index === expandColumnIndex;\n      }); // >>> Check if expand column need to fixed\n\n      var prevColumn = baseColumns[expandColumnIndex];\n      var fixedColumn;\n\n      if ((fixed === 'left' || fixed) && !expandIconColumnIndex) {\n        fixedColumn = 'left';\n      } else if ((fixed === 'right' || fixed) && expandIconColumnIndex === baseColumns.length) {\n        fixedColumn = 'right';\n      } else {\n        fixedColumn = prevColumn ? prevColumn.fixed : null;\n      } // >>> Create expandable column\n\n\n      var expandColumn = (_expandColumn = {}, _defineProperty(_expandColumn, INTERNAL_COL_DEFINE, {\n        className: \"\".concat(prefixCls, \"-expand-icon-col\"),\n        columnType: 'EXPAND_COLUMN'\n      }), _defineProperty(_expandColumn, \"title\", columnTitle), _defineProperty(_expandColumn, \"fixed\", fixedColumn), _defineProperty(_expandColumn, \"className\", \"\".concat(prefixCls, \"-row-expand-icon-cell\")), _defineProperty(_expandColumn, \"width\", columnWidth), _defineProperty(_expandColumn, \"render\", function render(_, record, index) {\n        var rowKey = getRowKey(record, index);\n        var expanded = expandedKeys.has(rowKey);\n        var recordExpandable = rowExpandable ? rowExpandable(record) : true;\n        var icon = expandIcon({\n          prefixCls: prefixCls,\n          expanded: expanded,\n          expandable: recordExpandable,\n          record: record,\n          onExpand: onTriggerExpand\n        });\n\n        if (expandRowByClick) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            }\n          }, icon);\n        }\n\n        return icon;\n      }), _expandColumn);\n      return cloneColumns.map(function (col) {\n        return col === EXPAND_COLUMN ? expandColumn : col;\n      });\n    }\n\n    if (process.env.NODE_ENV !== 'production' && baseColumns.includes(EXPAND_COLUMN)) {\n      warning(false, '`expandable` is not config but there exist `EXPAND_COLUMN` in `columns`.');\n    }\n\n    return baseColumns.filter(function (col) {\n      return col !== EXPAND_COLUMN;\n    });\n  }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction]); // ========================= Transform ========================\n\n  var mergedColumns = React.useMemo(function () {\n    var finalColumns = withExpandColumns;\n\n    if (transformColumns) {\n      finalColumns = transformColumns(finalColumns);\n    } // Always provides at least one column for table display\n\n\n    if (!finalColumns.length) {\n      finalColumns = [{\n        render: function render() {\n          return null;\n        }\n      }];\n    }\n\n    return finalColumns;\n  }, [transformColumns, withExpandColumns, direction]); // ========================== Flatten =========================\n\n  var flattenColumns = React.useMemo(function () {\n    if (direction === 'rtl') {\n      return revertForRtl(flatColumns(mergedColumns));\n    }\n\n    return flatColumns(mergedColumns);\n  }, [mergedColumns, direction]); // Only check out of production since it's waste for each render\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningFixed(direction === 'rtl' ? flattenColumns.slice().reverse() : flattenColumns);\n  }\n\n  return [mergedColumns, flattenColumns];\n}\n\nexport default useColumns;"],"mappings":"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"},"metadata":{},"sourceType":"module"}