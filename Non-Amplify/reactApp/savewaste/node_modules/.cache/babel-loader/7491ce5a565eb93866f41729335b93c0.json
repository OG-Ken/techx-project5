{"ast":null,"code":"export function isWindow(obj) {\n  return obj !== null && obj !== undefined && obj === obj.window;\n}\nexport default function getScroll(target, top) {\n  var _a, _b;\n\n  if (typeof window === 'undefined') {\n    return 0;\n  }\n\n  var method = top ? 'scrollTop' : 'scrollLeft';\n  var result = 0;\n\n  if (isWindow(target)) {\n    result = target[top ? 'pageYOffset' : 'pageXOffset'];\n  } else if (target instanceof Document) {\n    result = target.documentElement[method];\n  } else if (target instanceof HTMLElement) {\n    result = target[method];\n  } else if (target) {\n    // According to the type inference, the `target` is `never` type.\n    // Since we configured the loose mode type checking, and supports mocking the target with such shape below::\n    //    `{ documentElement: { scrollLeft: 200, scrollTop: 400 } }`,\n    //    the program may falls into this branch.\n    // Check the corresponding tests for details. Don't sure what is the real scenario this happens.\n    result = target[method];\n  }\n\n  if (target && !isWindow(target) && typeof result !== 'number') {\n    result = (_b = ((_a = target.ownerDocument) !== null && _a !== void 0 ? _a : target).documentElement) === null || _b === void 0 ? void 0 : _b[method];\n  }\n\n  return result;\n}","map":{"version":3,"names":["isWindow","obj","undefined","window","getScroll","target","top","_a","_b","method","result","Document","documentElement","HTMLElement","ownerDocument"],"sources":["C:/Users/kmath/Documents/Booz/nachoProblem/techx-project5/reactApp/savewaste/node_modules/antd/es/_util/getScroll.js"],"sourcesContent":["export function isWindow(obj) {\n  return obj !== null && obj !== undefined && obj === obj.window;\n}\nexport default function getScroll(target, top) {\n  var _a, _b;\n\n  if (typeof window === 'undefined') {\n    return 0;\n  }\n\n  var method = top ? 'scrollTop' : 'scrollLeft';\n  var result = 0;\n\n  if (isWindow(target)) {\n    result = target[top ? 'pageYOffset' : 'pageXOffset'];\n  } else if (target instanceof Document) {\n    result = target.documentElement[method];\n  } else if (target instanceof HTMLElement) {\n    result = target[method];\n  } else if (target) {\n    // According to the type inference, the `target` is `never` type.\n    // Since we configured the loose mode type checking, and supports mocking the target with such shape below::\n    //    `{ documentElement: { scrollLeft: 200, scrollTop: 400 } }`,\n    //    the program may falls into this branch.\n    // Check the corresponding tests for details. Don't sure what is the real scenario this happens.\n    result = target[method];\n  }\n\n  if (target && !isWindow(target) && typeof result !== 'number') {\n    result = (_b = ((_a = target.ownerDocument) !== null && _a !== void 0 ? _a : target).documentElement) === null || _b === void 0 ? void 0 : _b[method];\n  }\n\n  return result;\n}"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;EAC5B,OAAOA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKC,SAAxB,IAAqCD,GAAG,KAAKA,GAAG,CAACE,MAAxD;AACD;AACD,eAAe,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,GAA3B,EAAgC;EAC7C,IAAIC,EAAJ,EAAQC,EAAR;;EAEA,IAAI,OAAOL,MAAP,KAAkB,WAAtB,EAAmC;IACjC,OAAO,CAAP;EACD;;EAED,IAAIM,MAAM,GAAGH,GAAG,GAAG,WAAH,GAAiB,YAAjC;EACA,IAAII,MAAM,GAAG,CAAb;;EAEA,IAAIV,QAAQ,CAACK,MAAD,CAAZ,EAAsB;IACpBK,MAAM,GAAGL,MAAM,CAACC,GAAG,GAAG,aAAH,GAAmB,aAAvB,CAAf;EACD,CAFD,MAEO,IAAID,MAAM,YAAYM,QAAtB,EAAgC;IACrCD,MAAM,GAAGL,MAAM,CAACO,eAAP,CAAuBH,MAAvB,CAAT;EACD,CAFM,MAEA,IAAIJ,MAAM,YAAYQ,WAAtB,EAAmC;IACxCH,MAAM,GAAGL,MAAM,CAACI,MAAD,CAAf;EACD,CAFM,MAEA,IAAIJ,MAAJ,EAAY;IACjB;IACA;IACA;IACA;IACA;IACAK,MAAM,GAAGL,MAAM,CAACI,MAAD,CAAf;EACD;;EAED,IAAIJ,MAAM,IAAI,CAACL,QAAQ,CAACK,MAAD,CAAnB,IAA+B,OAAOK,MAAP,KAAkB,QAArD,EAA+D;IAC7DA,MAAM,GAAG,CAACF,EAAE,GAAG,CAAC,CAACD,EAAE,GAAGF,MAAM,CAACS,aAAb,MAAgC,IAAhC,IAAwCP,EAAE,KAAK,KAAK,CAApD,GAAwDA,EAAxD,GAA6DF,MAA9D,EAAsEO,eAA5E,MAAiG,IAAjG,IAAyGJ,EAAE,KAAK,KAAK,CAArH,GAAyH,KAAK,CAA9H,GAAkIA,EAAE,CAACC,MAAD,CAA7I;EACD;;EAED,OAAOC,MAAP;AACD"},"metadata":{},"sourceType":"module"}