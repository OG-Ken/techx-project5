{"ast":null,"code":"import warning from \"rc-util/es/warning\";\n\nfunction removeFromCheckedKeys(halfCheckedKeys, checkedKeys) {\n  var filteredKeys = new Set();\n  halfCheckedKeys.forEach(function (key) {\n    if (!checkedKeys.has(key)) {\n      filteredKeys.add(key);\n    }\n  });\n  return filteredKeys;\n}\n\nexport function isCheckDisabled(node) {\n  var _ref = node || {},\n      disabled = _ref.disabled,\n      disableCheckbox = _ref.disableCheckbox,\n      checkable = _ref.checkable;\n\n  return !!(disabled || disableCheckbox) || checkable === false;\n} // Fill miss keys\n\nfunction fillConductCheck(keys, levelEntities, maxLevel, syntheticGetCheckDisabled) {\n  var checkedKeys = new Set(keys);\n  var halfCheckedKeys = new Set(); // Add checked keys top to bottom\n\n  for (var level = 0; level <= maxLevel; level += 1) {\n    var entities = levelEntities.get(level) || new Set();\n    entities.forEach(function (entity) {\n      var key = entity.key,\n          node = entity.node,\n          _entity$children = entity.children,\n          children = _entity$children === void 0 ? [] : _entity$children;\n\n      if (checkedKeys.has(key) && !syntheticGetCheckDisabled(node)) {\n        children.filter(function (childEntity) {\n          return !syntheticGetCheckDisabled(childEntity.node);\n        }).forEach(function (childEntity) {\n          checkedKeys.add(childEntity.key);\n        });\n      }\n    });\n  } // Add checked keys from bottom to top\n\n\n  var visitedKeys = new Set();\n\n  for (var _level = maxLevel; _level >= 0; _level -= 1) {\n    var _entities = levelEntities.get(_level) || new Set();\n\n    _entities.forEach(function (entity) {\n      var parent = entity.parent,\n          node = entity.node; // Skip if no need to check\n\n      if (syntheticGetCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n        return;\n      } // Skip if parent is disabled\n\n\n      if (syntheticGetCheckDisabled(entity.parent.node)) {\n        visitedKeys.add(parent.key);\n        return;\n      }\n\n      var allChecked = true;\n      var partialChecked = false;\n      (parent.children || []).filter(function (childEntity) {\n        return !syntheticGetCheckDisabled(childEntity.node);\n      }).forEach(function (_ref2) {\n        var key = _ref2.key;\n        var checked = checkedKeys.has(key);\n\n        if (allChecked && !checked) {\n          allChecked = false;\n        }\n\n        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n          partialChecked = true;\n        }\n      });\n\n      if (allChecked) {\n        checkedKeys.add(parent.key);\n      }\n\n      if (partialChecked) {\n        halfCheckedKeys.add(parent.key);\n      }\n\n      visitedKeys.add(parent.key);\n    });\n  }\n\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))\n  };\n} // Remove useless key\n\n\nfunction cleanConductCheck(keys, halfKeys, levelEntities, maxLevel, syntheticGetCheckDisabled) {\n  var checkedKeys = new Set(keys);\n  var halfCheckedKeys = new Set(halfKeys); // Remove checked keys from top to bottom\n\n  for (var level = 0; level <= maxLevel; level += 1) {\n    var entities = levelEntities.get(level) || new Set();\n    entities.forEach(function (entity) {\n      var key = entity.key,\n          node = entity.node,\n          _entity$children2 = entity.children,\n          children = _entity$children2 === void 0 ? [] : _entity$children2;\n\n      if (!checkedKeys.has(key) && !halfCheckedKeys.has(key) && !syntheticGetCheckDisabled(node)) {\n        children.filter(function (childEntity) {\n          return !syntheticGetCheckDisabled(childEntity.node);\n        }).forEach(function (childEntity) {\n          checkedKeys.delete(childEntity.key);\n        });\n      }\n    });\n  } // Remove checked keys form bottom to top\n\n\n  halfCheckedKeys = new Set();\n  var visitedKeys = new Set();\n\n  for (var _level2 = maxLevel; _level2 >= 0; _level2 -= 1) {\n    var _entities2 = levelEntities.get(_level2) || new Set();\n\n    _entities2.forEach(function (entity) {\n      var parent = entity.parent,\n          node = entity.node; // Skip if no need to check\n\n      if (syntheticGetCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n        return;\n      } // Skip if parent is disabled\n\n\n      if (syntheticGetCheckDisabled(entity.parent.node)) {\n        visitedKeys.add(parent.key);\n        return;\n      }\n\n      var allChecked = true;\n      var partialChecked = false;\n      (parent.children || []).filter(function (childEntity) {\n        return !syntheticGetCheckDisabled(childEntity.node);\n      }).forEach(function (_ref3) {\n        var key = _ref3.key;\n        var checked = checkedKeys.has(key);\n\n        if (allChecked && !checked) {\n          allChecked = false;\n        }\n\n        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n          partialChecked = true;\n        }\n      });\n\n      if (!allChecked) {\n        checkedKeys.delete(parent.key);\n      }\n\n      if (partialChecked) {\n        halfCheckedKeys.add(parent.key);\n      }\n\n      visitedKeys.add(parent.key);\n    });\n  }\n\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))\n  };\n}\n/**\n * Conduct with keys.\n * @param keyList current key list\n * @param keyEntities key - dataEntity map\n * @param mode `fill` to fill missing key, `clean` to remove useless key\n */\n\n\nexport function conductCheck(keyList, checked, keyEntities, getCheckDisabled) {\n  var warningMissKeys = [];\n  var syntheticGetCheckDisabled;\n\n  if (getCheckDisabled) {\n    syntheticGetCheckDisabled = getCheckDisabled;\n  } else {\n    syntheticGetCheckDisabled = isCheckDisabled;\n  } // We only handle exist keys\n\n\n  var keys = new Set(keyList.filter(function (key) {\n    var hasEntity = !!keyEntities[key];\n\n    if (!hasEntity) {\n      warningMissKeys.push(key);\n    }\n\n    return hasEntity;\n  }));\n  var levelEntities = new Map();\n  var maxLevel = 0; // Convert entities by level for calculation\n\n  Object.keys(keyEntities).forEach(function (key) {\n    var entity = keyEntities[key];\n    var level = entity.level;\n    var levelSet = levelEntities.get(level);\n\n    if (!levelSet) {\n      levelSet = new Set();\n      levelEntities.set(level, levelSet);\n    }\n\n    levelSet.add(entity);\n    maxLevel = Math.max(maxLevel, level);\n  });\n  warning(!warningMissKeys.length, \"Tree missing follow keys: \".concat(warningMissKeys.slice(0, 100).map(function (key) {\n    return \"'\".concat(key, \"'\");\n  }).join(', ')));\n  var result;\n\n  if (checked === true) {\n    result = fillConductCheck(keys, levelEntities, maxLevel, syntheticGetCheckDisabled);\n  } else {\n    result = cleanConductCheck(keys, checked.halfCheckedKeys, levelEntities, maxLevel, syntheticGetCheckDisabled);\n  }\n\n  return result;\n}","map":{"version":3,"names":["warning","removeFromCheckedKeys","halfCheckedKeys","checkedKeys","filteredKeys","Set","forEach","key","has","add","isCheckDisabled","node","_ref","disabled","disableCheckbox","checkable","fillConductCheck","keys","levelEntities","maxLevel","syntheticGetCheckDisabled","level","entities","get","entity","_entity$children","children","filter","childEntity","visitedKeys","_level","_entities","parent","allChecked","partialChecked","_ref2","checked","Array","from","cleanConductCheck","halfKeys","_entity$children2","delete","_level2","_entities2","_ref3","conductCheck","keyList","keyEntities","getCheckDisabled","warningMissKeys","hasEntity","push","Map","Object","levelSet","set","Math","max","length","concat","slice","map","join","result"],"sources":["C:/Users/kmath/Documents/Booz/nachoProblem/techx-project5/reactApp/savewaste/node_modules/rc-tree/es/utils/conductUtil.js"],"sourcesContent":["import warning from \"rc-util/es/warning\";\n\nfunction removeFromCheckedKeys(halfCheckedKeys, checkedKeys) {\n  var filteredKeys = new Set();\n  halfCheckedKeys.forEach(function (key) {\n    if (!checkedKeys.has(key)) {\n      filteredKeys.add(key);\n    }\n  });\n  return filteredKeys;\n}\n\nexport function isCheckDisabled(node) {\n  var _ref = node || {},\n      disabled = _ref.disabled,\n      disableCheckbox = _ref.disableCheckbox,\n      checkable = _ref.checkable;\n\n  return !!(disabled || disableCheckbox) || checkable === false;\n} // Fill miss keys\n\nfunction fillConductCheck(keys, levelEntities, maxLevel, syntheticGetCheckDisabled) {\n  var checkedKeys = new Set(keys);\n  var halfCheckedKeys = new Set(); // Add checked keys top to bottom\n\n  for (var level = 0; level <= maxLevel; level += 1) {\n    var entities = levelEntities.get(level) || new Set();\n    entities.forEach(function (entity) {\n      var key = entity.key,\n          node = entity.node,\n          _entity$children = entity.children,\n          children = _entity$children === void 0 ? [] : _entity$children;\n\n      if (checkedKeys.has(key) && !syntheticGetCheckDisabled(node)) {\n        children.filter(function (childEntity) {\n          return !syntheticGetCheckDisabled(childEntity.node);\n        }).forEach(function (childEntity) {\n          checkedKeys.add(childEntity.key);\n        });\n      }\n    });\n  } // Add checked keys from bottom to top\n\n\n  var visitedKeys = new Set();\n\n  for (var _level = maxLevel; _level >= 0; _level -= 1) {\n    var _entities = levelEntities.get(_level) || new Set();\n\n    _entities.forEach(function (entity) {\n      var parent = entity.parent,\n          node = entity.node; // Skip if no need to check\n\n      if (syntheticGetCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n        return;\n      } // Skip if parent is disabled\n\n\n      if (syntheticGetCheckDisabled(entity.parent.node)) {\n        visitedKeys.add(parent.key);\n        return;\n      }\n\n      var allChecked = true;\n      var partialChecked = false;\n      (parent.children || []).filter(function (childEntity) {\n        return !syntheticGetCheckDisabled(childEntity.node);\n      }).forEach(function (_ref2) {\n        var key = _ref2.key;\n        var checked = checkedKeys.has(key);\n\n        if (allChecked && !checked) {\n          allChecked = false;\n        }\n\n        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n          partialChecked = true;\n        }\n      });\n\n      if (allChecked) {\n        checkedKeys.add(parent.key);\n      }\n\n      if (partialChecked) {\n        halfCheckedKeys.add(parent.key);\n      }\n\n      visitedKeys.add(parent.key);\n    });\n  }\n\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))\n  };\n} // Remove useless key\n\n\nfunction cleanConductCheck(keys, halfKeys, levelEntities, maxLevel, syntheticGetCheckDisabled) {\n  var checkedKeys = new Set(keys);\n  var halfCheckedKeys = new Set(halfKeys); // Remove checked keys from top to bottom\n\n  for (var level = 0; level <= maxLevel; level += 1) {\n    var entities = levelEntities.get(level) || new Set();\n    entities.forEach(function (entity) {\n      var key = entity.key,\n          node = entity.node,\n          _entity$children2 = entity.children,\n          children = _entity$children2 === void 0 ? [] : _entity$children2;\n\n      if (!checkedKeys.has(key) && !halfCheckedKeys.has(key) && !syntheticGetCheckDisabled(node)) {\n        children.filter(function (childEntity) {\n          return !syntheticGetCheckDisabled(childEntity.node);\n        }).forEach(function (childEntity) {\n          checkedKeys.delete(childEntity.key);\n        });\n      }\n    });\n  } // Remove checked keys form bottom to top\n\n\n  halfCheckedKeys = new Set();\n  var visitedKeys = new Set();\n\n  for (var _level2 = maxLevel; _level2 >= 0; _level2 -= 1) {\n    var _entities2 = levelEntities.get(_level2) || new Set();\n\n    _entities2.forEach(function (entity) {\n      var parent = entity.parent,\n          node = entity.node; // Skip if no need to check\n\n      if (syntheticGetCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n        return;\n      } // Skip if parent is disabled\n\n\n      if (syntheticGetCheckDisabled(entity.parent.node)) {\n        visitedKeys.add(parent.key);\n        return;\n      }\n\n      var allChecked = true;\n      var partialChecked = false;\n      (parent.children || []).filter(function (childEntity) {\n        return !syntheticGetCheckDisabled(childEntity.node);\n      }).forEach(function (_ref3) {\n        var key = _ref3.key;\n        var checked = checkedKeys.has(key);\n\n        if (allChecked && !checked) {\n          allChecked = false;\n        }\n\n        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n          partialChecked = true;\n        }\n      });\n\n      if (!allChecked) {\n        checkedKeys.delete(parent.key);\n      }\n\n      if (partialChecked) {\n        halfCheckedKeys.add(parent.key);\n      }\n\n      visitedKeys.add(parent.key);\n    });\n  }\n\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))\n  };\n}\n/**\n * Conduct with keys.\n * @param keyList current key list\n * @param keyEntities key - dataEntity map\n * @param mode `fill` to fill missing key, `clean` to remove useless key\n */\n\n\nexport function conductCheck(keyList, checked, keyEntities, getCheckDisabled) {\n  var warningMissKeys = [];\n  var syntheticGetCheckDisabled;\n\n  if (getCheckDisabled) {\n    syntheticGetCheckDisabled = getCheckDisabled;\n  } else {\n    syntheticGetCheckDisabled = isCheckDisabled;\n  } // We only handle exist keys\n\n\n  var keys = new Set(keyList.filter(function (key) {\n    var hasEntity = !!keyEntities[key];\n\n    if (!hasEntity) {\n      warningMissKeys.push(key);\n    }\n\n    return hasEntity;\n  }));\n  var levelEntities = new Map();\n  var maxLevel = 0; // Convert entities by level for calculation\n\n  Object.keys(keyEntities).forEach(function (key) {\n    var entity = keyEntities[key];\n    var level = entity.level;\n    var levelSet = levelEntities.get(level);\n\n    if (!levelSet) {\n      levelSet = new Set();\n      levelEntities.set(level, levelSet);\n    }\n\n    levelSet.add(entity);\n    maxLevel = Math.max(maxLevel, level);\n  });\n  warning(!warningMissKeys.length, \"Tree missing follow keys: \".concat(warningMissKeys.slice(0, 100).map(function (key) {\n    return \"'\".concat(key, \"'\");\n  }).join(', ')));\n  var result;\n\n  if (checked === true) {\n    result = fillConductCheck(keys, levelEntities, maxLevel, syntheticGetCheckDisabled);\n  } else {\n    result = cleanConductCheck(keys, checked.halfCheckedKeys, levelEntities, maxLevel, syntheticGetCheckDisabled);\n  }\n\n  return result;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}