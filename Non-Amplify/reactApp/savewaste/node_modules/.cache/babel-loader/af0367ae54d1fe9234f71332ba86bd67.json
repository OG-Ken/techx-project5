{"ast":null,"code":"/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js/core';\nimport TypedArrays from 'crypto-js/lib-typedarrays'; // necessary for crypto js\n\nimport Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\nvar isBrowser = typeof navigator !== 'undefined';\nvar userAgent = isBrowser ? navigator.userAgent : 'nodejs';\n/** @class */\n\nvar CognitoUser = /*#__PURE__*/function () {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   * @param {object} data.Storage Optional storage object.\n   */\n  function CognitoUser(data) {\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and Pool information are required.');\n    }\n\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n    this.client = data.Pool.client;\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n    this.storage = data.Storage || new StorageHelper().getStorage();\n    this.keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    this.userDataKey = this.keyPrefix + \".\" + this.username + \".userData\";\n  }\n  /**\n   * Sets the session for this user\n   * @param {CognitoUserSession} signInUserSession the session\n   * @returns {void}\n   */\n\n\n  var _proto = CognitoUser.prototype;\n\n  _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n    this.clearCachedUserData();\n    this.signInUserSession = signInUserSession;\n    this.cacheTokens();\n  }\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */\n  ;\n\n  _proto.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  }\n  /**\n   * @returns {string} the user's username\n   */\n  ;\n\n  _proto.getUsername = function getUsername() {\n    return this.username;\n  }\n  /**\n   * @returns {String} the authentication flow type\n   */\n  ;\n\n  _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  }\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  }\n  /**\n   * This is used for authenticating the user through the custom authentication flow.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.initiateAuth = function initiateAuth(authDetails, callback) {\n    var _this = this;\n\n    var authParameters = authDetails.getAuthParameters();\n    authParameters.USERNAME = this.username;\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'CUSTOM_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = data.ChallengeName;\n      var challengeParameters = data.ChallengeParameters;\n\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        _this.Session = data.Session;\n        return callback.customChallenge(challengeParameters);\n      }\n\n      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n\n      _this.cacheTokens();\n\n      return callback.onSuccess(_this.signInUserSession);\n    });\n  }\n  /**\n   * This is used for authenticating the user.\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUser = function authenticateUser(authDetails, callback) {\n    if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n      return this.authenticateUserPlainUsernamePassword(authDetails, callback);\n    } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n      return this.authenticateUserDefaultAuth(authDetails, callback);\n    }\n\n    return callback.onFailure(new Error('Authentication flow type is invalid.'));\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * It calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n    var _this2 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var dateHelper = new DateHelper();\n    var serverBValue;\n    var salt;\n    var authParameters = {};\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    authParameters.USERNAME = this.username;\n    authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n      // getLargeAValue callback start\n      if (errOnAValue) {\n        callback.onFailure(errOnAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n\n      if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n        authParameters.CHALLENGE_NAME = 'SRP_A';\n      }\n\n      var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n      var jsonReq = {\n        AuthFlow: _this2.authenticationFlowType,\n        ClientId: _this2.pool.getClientId(),\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetaData\n      };\n\n      if (_this2.getUserContextData(_this2.username)) {\n        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n      }\n\n      _this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        _this2.username = challengeParameters.USER_ID_FOR_SRP;\n        _this2.userDataKey = _this2.keyPrefix + \".\" + _this2.username + \".userData\";\n        serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        salt = new BigInteger(challengeParameters.SALT, 16);\n\n        _this2.getCachedDeviceKeyAndPassword();\n\n        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errOnHkdf) {\n            callback.onFailure(errOnHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this2.pool.getUserPoolId().split('_')[1], 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this2.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n          if (_this2.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = _this2.deviceKey;\n          }\n\n          var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n            return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n              if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n                challengeResponses.DEVICE_KEY = null;\n                _this2.deviceKey = null;\n                _this2.randomPassword = null;\n                _this2.deviceGroupKey = null;\n\n                _this2.clearCachedDeviceKeyAndPassword();\n\n                return respondToAuthChallenge(challenge, challengeCallback);\n              }\n\n              return challengeCallback(errChallenge, dataChallenge);\n            });\n          };\n\n          var jsonReqResp = {\n            ChallengeName: 'PASSWORD_VERIFIER',\n            ClientId: _this2.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session,\n            ClientMetadata: clientMetaData\n          };\n\n          if (_this2.getUserContextData()) {\n            jsonReqResp.UserContextData = _this2.getUserContextData();\n          }\n\n          respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n          });\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n    var _this3 = this;\n\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.PASSWORD = authDetails.getPassword();\n\n    if (!authParameters.PASSWORD) {\n      callback.onFailure(new Error('PASSWORD parameter is required'));\n      return;\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'USER_PASSWORD_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n\n    if (this.getUserContextData(this.username)) {\n      jsonReq.UserContextData = this.getUserContextData(this.username);\n    } // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n    // Cognito UserPools verifies password and returns tokens.\n\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {object} dataAuthenticate authentication data\n   * @param {object} authenticationHelper helper created\n   * @param {callback} callback passed on from caller\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    var _this4 = this;\n\n    var challengeName = dataAuthenticate.ChallengeName;\n    var challengeParameters = dataAuthenticate.ChallengeParameters;\n\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SELECT_MFA_TYPE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.selectMFAType(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'MFA_SETUP') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaSetup(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.totpRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n\n    if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n      this.Session = dataAuthenticate.Session;\n      var userAttributes = null;\n      var rawRequiredAttributes = null;\n      var requiredAttributes = [];\n      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\n      if (challengeParameters) {\n        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n      }\n\n      if (rawRequiredAttributes) {\n        for (var i = 0; i < rawRequiredAttributes.length; i++) {\n          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n        }\n      }\n\n      return callback.newPasswordRequired(userAttributes, requiredAttributes);\n    }\n\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.Session = dataAuthenticate.Session;\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.challengeName = challengeName;\n    this.cacheTokens();\n    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n\n    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n      if (errGenHash) {\n        return callback.onFailure(errGenHash);\n      }\n\n      var deviceSecretVerifierConfig = {\n        Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n        PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n      };\n      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n      _this4.randomPassword = authenticationHelper.getRandomPassword();\n\n      _this4.client.request('ConfirmDevice', {\n        DeviceKey: newDeviceMetadata.DeviceKey,\n        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: userAgent\n      }, function (errConfirm, dataConfirm) {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n\n        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n        _this4.cacheDeviceKeyAndPassword();\n\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n        }\n\n        return callback.onSuccess(_this4.signInUserSession);\n      });\n\n      return undefined;\n    });\n    return undefined;\n  }\n  /**\n   * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n   * Pass the new password with any new user attributes to be updated.\n   * User attribute keys must be of format userAttributes.<attribute_name>.\n   * @param {string} newPassword new password for this user\n   * @param {object} requiredAttributeData map with values for all required attributes\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *         response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {\n    var _this5 = this;\n\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n    var finalUserAttributes = {};\n\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach(function (key) {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    var jsonReq = {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n\n      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   * @private\n   */\n  ;\n\n  _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {\n    var _this6 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n    var dateHelper = new DateHelper();\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authenticationHelper.getLargeAValue(function (errAValue, aValue) {\n      // getLargeAValue callback start\n      if (errAValue) {\n        callback.onFailure(errAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n      var jsonReq = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: _this6.pool.getClientId(),\n        ChallengeResponses: authParameters,\n        ClientMetadata: clientMetadata,\n        Session: _this6.Session\n      };\n\n      if (_this6.getUserContextData()) {\n        jsonReq.UserContextData = _this6.getUserContextData();\n      }\n\n      _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        var salt = new BigInteger(challengeParameters.SALT, 16);\n        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errHkdf) {\n            return callback.onFailure(errHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this6.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          challengeResponses.DEVICE_KEY = _this6.deviceKey;\n          var jsonReqResp = {\n            ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n            ClientId: _this6.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n\n          if (_this6.getUserContextData()) {\n            jsonReqResp.UserContextData = _this6.getUserContextData();\n          }\n\n          _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n            _this6.cacheTokens();\n\n            return callback.onSuccess(_this6.signInUserSession);\n          });\n\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  }\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmSignUp', jsonReq, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n  }\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challenge answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {\n    var _this7 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this7.authenticateUserInternal(data, authenticationHelper, callback);\n    });\n  }\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {string} mfaType The mfa we are replying to.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {\n    var _this8 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n    var mfaTypeSelection = mfaType || 'SMS_MFA';\n\n    if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n    }\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: mfaTypeSelection,\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = dataAuthenticate.ChallengeName;\n\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        _this8.getDeviceResponse(callback);\n\n        return undefined;\n      }\n\n      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n      _this8.cacheTokens();\n\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(_this8.signInUserSession);\n      }\n\n      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split('_')[1]);\n      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n        if (errGenHash) {\n          return callback.onFailure(errGenHash);\n        }\n\n        var deviceSecretVerifierConfig = {\n          Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n          PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n        };\n        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n        _this8.randomPassword = authenticationHelper.getRandomPassword();\n\n        _this8.client.request('ConfirmDevice', {\n          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n          DeviceName: userAgent\n        }, function (errConfirm, dataConfirm) {\n          if (errConfirm) {\n            return callback.onFailure(errConfirm);\n          }\n\n          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n          _this8.cacheDeviceKeyAndPassword();\n\n          if (dataConfirm.UserConfirmationNecessary === true) {\n            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n          }\n\n          return callback.onSuccess(_this8.signInUserSession);\n        });\n\n        return undefined;\n      });\n      return undefined;\n    });\n  }\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('ChangePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.enableMFA = function enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    var mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number'\n    };\n    mfaOptions.push(mfaEnabled);\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('SetUserMFAPreference', {\n      SMSMfaSettings: smsMfaSettings,\n      SoftwareTokenMfaSettings: softwareTokenMfaSettings,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to disable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.disableMFA = function disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to delete itself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.deleteUser = function deleteUser(callback, clientMetadata) {\n    var _this9 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      _this9.clearCachedUser();\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {\n    var _this10 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('UpdateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      } // update cached user\n\n\n      return _this10.getUserData(function () {\n        return callback(null, 'SUCCESS');\n      }, {\n        bypassCache: true\n      });\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getUserAttributes = function getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var attributeList = [];\n\n      for (var i = 0; i < userData.UserAttributes.length; i++) {\n        var attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value\n        };\n        var userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n\n      return callback(null, attributeList);\n    });\n    return undefined;\n  }\n  /**\n   * This was previously used by an authenticated user to get MFAOptions,\n   * but no longer returns a meaningful response. Refer to the documentation for\n   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n   * @deprecated\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getMFAOptions = function getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.createGetUserRequest = function createGetUserRequest() {\n    return this.client.promisifyRequest('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {\n    var _this11 = this;\n\n    if (options === void 0) {\n      options = {};\n    } // best effort, if not possible\n\n\n    return new Promise(function (resolve) {\n      var refresh = _this11.signInUserSession.getRefreshToken();\n\n      if (refresh && refresh.getToken()) {\n        _this11.refreshSession(refresh, resolve, options.clientMetadata);\n      } else {\n        resolve();\n      }\n    });\n  }\n  /**\n   * @typedef {Object} GetUserDataOptions\n   * @property {boolean} bypassCache - force getting data from Cognito service\n   * @property {Record<string, string>} clientMetadata - clientMetadata for getSession\n   */\n\n  /**\n   * This is used by an authenticated users to get the userData\n   * @param {nodeCallback<UserData>} callback Called on success or error.\n   * @param {GetUserDataOptions} params\n   * @returns {void}\n   */\n  ;\n\n  _proto.getUserData = function getUserData(callback, params) {\n    var _this12 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.clearCachedUserData();\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var userData = this.getUserDataFromCache();\n\n    if (!userData) {\n      this.fetchUserData().then(function (data) {\n        callback(null, data);\n      })[\"catch\"](callback);\n      return;\n    }\n\n    if (this.isFetchUserDataAndTokenRequired(params)) {\n      this.fetchUserData().then(function (data) {\n        return _this12.refreshSessionIfPossible(params).then(function () {\n          return data;\n        });\n      }).then(function (data) {\n        return callback(null, data);\n      })[\"catch\"](callback);\n      return;\n    }\n\n    try {\n      callback(null, JSON.parse(userData));\n      return;\n    } catch (err) {\n      this.clearCachedUserData();\n      callback(err, null);\n      return;\n    }\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.getUserDataFromCache = function getUserDataFromCache() {\n    var userData = this.storage.getItem(this.userDataKey);\n    return userData;\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {\n    var _ref = params || {},\n        _ref$bypassCache = _ref.bypassCache,\n        bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;\n\n    return bypassCache;\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.fetchUserData = function fetchUserData() {\n    var _this13 = this;\n\n    return this.createGetUserRequest().then(function (data) {\n      _this13.cacheUserData(data);\n\n      return data;\n    });\n  }\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {\n    var _this14 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      } // update cached user\n\n\n      return _this14.getUserData(function () {\n        return callback(null, 'SUCCESS');\n      }, {\n        bypassCache: true\n      });\n    });\n    return undefined;\n  }\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, result);\n    });\n  }\n  /**\n   * @typedef {Object} GetSessionOptions\n   * @property {Record<string, string>} clientMetadata - clientMetadata for getSession\n   */\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {GetSessionOptions} options\n   * @returns {void}\n   */\n  ;\n\n  _proto.getSession = function getSession(callback, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var idTokenKey = keyPrefix + \".idToken\";\n    var accessTokenKey = keyPrefix + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".clockDrift\";\n\n    if (this.storage.getItem(idTokenKey)) {\n      var idToken = new CognitoIdToken({\n        IdToken: this.storage.getItem(idTokenKey)\n      });\n      var accessToken = new CognitoAccessToken({\n        AccessToken: this.storage.getItem(accessTokenKey)\n      });\n      var refreshToken = new CognitoRefreshToken({\n        RefreshToken: this.storage.getItem(refreshTokenKey)\n      });\n      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n      var sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n        ClockDrift: clockDrift\n      };\n      var cachedSession = new CognitoUserSession(sessionData);\n\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n\n      if (!refreshToken.getToken()) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n\n      this.refreshSession(refreshToken, callback, options.clientMetadata);\n    } else {\n      callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n    }\n\n    return undefined;\n  }\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {\n    var _this15 = this;\n\n    var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;\n    var authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n\n    if (this.storage.getItem(lastUserKey)) {\n      this.username = this.storage.getItem(lastUserKey);\n      var deviceKeyKey = keyPrefix + \".\" + this.username + \".deviceKey\";\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          _this15.clearCachedUser();\n        }\n\n        return wrappedCallback(err, null);\n      }\n\n      if (authResult) {\n        var authenticationResult = authResult.AuthenticationResult;\n\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n\n        _this15.signInUserSession = _this15.getCognitoUserSession(authenticationResult);\n\n        _this15.cacheTokens();\n\n        return wrappedCallback(null, _this15.signInUserSession);\n      }\n\n      return undefined;\n    });\n  }\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.cacheTokens = function cacheTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(clockDriftKey, \"\" + this.signInUserSession.getClockDrift());\n    this.storage.setItem(lastUserKey, this.username);\n  }\n  /**\n   * This is to cache user data\n   */\n  ;\n\n  _proto.cacheUserData = function cacheUserData(userData) {\n    this.storage.setItem(this.userDataKey, JSON.stringify(userData));\n  }\n  /**\n   * This is to remove cached user data\n   */\n  ;\n\n  _proto.clearCachedUserData = function clearCachedUserData() {\n    this.storage.removeItem(this.userDataKey);\n  };\n\n  _proto.clearCachedUser = function clearCachedUser() {\n    this.clearCachedTokens();\n    this.clearCachedUserData();\n  }\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */\n  ;\n\n  _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.setItem(deviceKeyKey, this.deviceKey);\n    this.storage.setItem(randomPasswordKey, this.randomPassword);\n    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  }\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */\n  ;\n\n  _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n\n    if (this.storage.getItem(deviceKeyKey)) {\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      this.randomPassword = this.storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n    }\n  }\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.removeItem(deviceKeyKey);\n    this.storage.removeItem(randomPasswordKey);\n    this.storage.removeItem(deviceGroupKeyKey);\n  }\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.clearCachedTokens = function clearCachedTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(clockDriftKey);\n  }\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */\n  ;\n\n  _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {\n    var idToken = new CognitoIdToken(authResult);\n    var accessToken = new CognitoAccessToken(authResult);\n    var refreshToken = new CognitoRefreshToken(authResult);\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken\n    };\n    return new CognitoUserSession(sessionData);\n  }\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ForgotPassword', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess(data);\n    });\n  }\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n  }\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('VerifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getDevice = function getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('ForgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgetDevice = function forgetDevice(callback) {\n    var _this16 = this;\n\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: function onSuccess(result) {\n        _this16.deviceKey = null;\n        _this16.deviceGroupKey = null;\n        _this16.randomPassword = null;\n\n        _this16.clearCachedDeviceKeyAndPassword();\n\n        return callback.onSuccess(result);\n      }\n    });\n  }\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string | null} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */\n  ;\n\n  _proto.listDevices = function listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    var requestParams = {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit\n    };\n\n    if (paginationToken) {\n      requestParams.PaginationToken = paginationToken;\n    }\n\n    this.client.request('ListDevices', requestParams, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.globalSignOut = function globalSignOut(callback) {\n    var _this17 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GlobalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this17.clearCachedUser();\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */\n  ;\n\n  _proto.signOut = function signOut(revokeTokenCallback) {\n    var _this18 = this; // If tokens won't be revoked, we just clean the client data.\n\n\n    if (!revokeTokenCallback || typeof revokeTokenCallback !== 'function') {\n      this.cleanClientData();\n      return;\n    }\n\n    this.getSession(function (error, _session) {\n      if (error) {\n        return revokeTokenCallback(error);\n      }\n\n      _this18.revokeTokens(function (err) {\n        _this18.cleanClientData();\n\n        revokeTokenCallback(err);\n      });\n    });\n  };\n\n  _proto.revokeTokens = function revokeTokens(revokeTokenCallback) {\n    if (revokeTokenCallback === void 0) {\n      revokeTokenCallback = function revokeTokenCallback() {};\n    }\n\n    if (typeof revokeTokenCallback !== 'function') {\n      throw new Error('Invalid revokeTokenCallback. It should be a function.');\n    }\n\n    var tokensToBeRevoked = [];\n\n    if (!this.signInUserSession) {\n      var error = new Error('User is not authenticated');\n      return revokeTokenCallback(error);\n    }\n\n    if (!this.signInUserSession.getAccessToken()) {\n      var _error = new Error('No Access token available');\n\n      return revokeTokenCallback(_error);\n    }\n\n    var refreshToken = this.signInUserSession.getRefreshToken().getToken();\n    var accessToken = this.signInUserSession.getAccessToken();\n\n    if (this.isSessionRevocable(accessToken)) {\n      if (refreshToken) {\n        return this.revokeToken({\n          token: refreshToken,\n          callback: revokeTokenCallback\n        });\n      }\n    }\n\n    revokeTokenCallback();\n  };\n\n  _proto.isSessionRevocable = function isSessionRevocable(token) {\n    if (token && typeof token.decodePayload === 'function') {\n      try {\n        var _token$decodePayload = token.decodePayload(),\n            origin_jti = _token$decodePayload.origin_jti;\n\n        return !!origin_jti;\n      } catch (err) {// Nothing to do, token doesnt have origin_jti claim\n      }\n    }\n\n    return false;\n  };\n\n  _proto.cleanClientData = function cleanClientData() {\n    this.signInUserSession = null;\n    this.clearCachedUser();\n  };\n\n  _proto.revokeToken = function revokeToken(_ref2) {\n    var token = _ref2.token,\n        callback = _ref2.callback;\n    this.client.requestWithRetry('RevokeToken', {\n      Token: token,\n      ClientId: this.pool.getClientId()\n    }, function (err) {\n      if (err) {\n        return callback(err);\n      }\n\n      callback();\n    });\n  }\n  /**\n   * This is used by a user trying to select a given MFA\n   * @param {string} answerChallenge the mfa the user wants\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n    var _this19 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var jsonReq = {\n      ChallengeName: 'SELECT_MFA_TYPE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this19.Session = data.Session;\n\n      if (answerChallenge === 'SMS_MFA') {\n        return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);\n      }\n\n      if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n        return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);\n      }\n\n      return undefined;\n    });\n  }\n  /**\n   * This returns the user context data for advanced security feature.\n   * @returns {string} the user context data from CognitoUserPool\n   */\n  ;\n\n  _proto.getUserContextData = function getUserContextData() {\n    var pool = this.pool;\n    return pool.getUserContextData(this.username);\n  }\n  /**\n   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.associateSoftwareToken = function associateSoftwareToken(callback) {\n    var _this20 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('AssociateSoftwareToken', {\n        Session: this.Session\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this20.Session = data.Session;\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    } else {\n      this.client.request('AssociateSoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    }\n  }\n  /**\n   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n   * @param {string} totpCode The MFA code entered by the user.\n   * @param {string} friendlyDeviceName The device name we are assigning to the device.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n    var _this21 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('VerifySoftwareToken', {\n        Session: this.Session,\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this21.Session = data.Session;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = _this21.username;\n        var jsonReq = {\n          ChallengeName: 'MFA_SETUP',\n          ClientId: _this21.pool.getClientId(),\n          ChallengeResponses: challengeResponses,\n          Session: _this21.Session\n        };\n\n        if (_this21.getUserContextData()) {\n          jsonReq.UserContextData = _this21.getUserContextData();\n        }\n\n        _this21.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n          if (errRespond) {\n            return callback.onFailure(errRespond);\n          }\n\n          _this21.signInUserSession = _this21.getCognitoUserSession(dataRespond.AuthenticationResult);\n\n          _this21.cacheTokens();\n\n          return callback.onSuccess(_this21.signInUserSession);\n        });\n\n        return undefined;\n      });\n    } else {\n      this.client.request('VerifySoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.onSuccess(data);\n      });\n    }\n  };\n\n  return CognitoUser;\n}();\n\nexport { CognitoUser as default };","map":{"version":3,"names":["Buffer","CryptoJS","TypedArrays","Base64","HmacSHA256","BigInteger","AuthenticationHelper","CognitoAccessToken","CognitoIdToken","CognitoRefreshToken","CognitoUserSession","DateHelper","CognitoUserAttribute","StorageHelper","isBrowser","navigator","userAgent","CognitoUser","data","Username","Pool","Error","username","pool","Session","client","signInUserSession","authenticationFlowType","storage","Storage","getStorage","keyPrefix","getClientId","userDataKey","_proto","prototype","setSignInUserSession","clearCachedUserData","cacheTokens","getSignInUserSession","getUsername","getAuthenticationFlowType","setAuthenticationFlowType","initiateAuth","authDetails","callback","_this","authParameters","getAuthParameters","USERNAME","clientMetaData","Object","keys","getValidationData","length","getClientMetadata","jsonReq","AuthFlow","ClientId","AuthParameters","ClientMetadata","getUserContextData","UserContextData","request","err","onFailure","challengeName","ChallengeName","challengeParameters","ChallengeParameters","customChallenge","getCognitoUserSession","AuthenticationResult","onSuccess","authenticateUser","authenticateUserPlainUsernamePassword","authenticateUserDefaultAuth","_this2","authenticationHelper","getUserPoolId","split","dateHelper","serverBValue","salt","deviceKey","DEVICE_KEY","getLargeAValue","errOnAValue","aValue","SRP_A","toString","CHALLENGE_NAME","USER_ID_FOR_SRP","SRP_B","SALT","getCachedDeviceKeyAndPassword","getPasswordAuthenticationKey","getPassword","errOnHkdf","hkdf","dateNow","getNowString","message","lib","WordArray","create","concat","from","SECRET_BLOCK","key","signatureString","stringify","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","respondToAuthChallenge","challenge","challengeCallback","errChallenge","dataChallenge","code","toLowerCase","indexOf","randomPassword","deviceGroupKey","clearCachedDeviceKeyAndPassword","jsonReqResp","ChallengeResponses","errAuthenticate","dataAuthenticate","authenticateUserInternal","undefined","_this3","PASSWORD","authResult","_this4","mfaRequired","selectMFAType","mfaSetup","totpRequired","userAttributes","rawRequiredAttributes","requiredAttributes","userAttributesPrefix","getNewPasswordRequiredChallengeUserAttributePrefix","JSON","parse","i","substr","newPasswordRequired","getDeviceResponse","newDeviceMetadata","NewDeviceMetadata","generateHashDevice","DeviceGroupKey","DeviceKey","errGenHash","deviceSecretVerifierConfig","Salt","getSaltDevices","PasswordVerifier","getVerifierDevices","verifierDevices","getRandomPassword","AccessToken","getAccessToken","getJwtToken","DeviceSecretVerifierConfig","DeviceName","errConfirm","dataConfirm","cacheDeviceKeyAndPassword","UserConfirmationNecessary","completeNewPasswordChallenge","newPassword","requiredAttributeData","clientMetadata","_this5","finalUserAttributes","forEach","NEW_PASSWORD","_this6","errAValue","errHkdf","confirmRegistration","confirmationCode","forceAliasCreation","ConfirmationCode","ForceAliasCreation","sendCustomChallengeAnswer","answerChallenge","_this7","ANSWER","sendMFACode","mfaType","_this8","SMS_MFA_CODE","mfaTypeSelection","SOFTWARE_TOKEN_MFA_CODE","changePassword","oldUserPassword","newUserPassword","isValid","PreviousPassword","ProposedPassword","enableMFA","mfaOptions","mfaEnabled","DeliveryMedium","AttributeName","push","MFAOptions","setUserMfaPreference","smsMfaSettings","softwareTokenMfaSettings","SMSMfaSettings","SoftwareTokenMfaSettings","disableMFA","deleteUser","_this9","clearCachedUser","updateAttributes","attributes","_this10","UserAttributes","getUserData","bypassCache","getUserAttributes","userData","attributeList","attribute","Name","Value","userAttribute","getMFAOptions","createGetUserRequest","promisifyRequest","refreshSessionIfPossible","options","_this11","Promise","resolve","refresh","getRefreshToken","getToken","refreshSession","params","_this12","getUserDataFromCache","fetchUserData","then","isFetchUserDataAndTokenRequired","getItem","_ref","_ref$bypassCache","_this13","cacheUserData","deleteAttributes","_this14","UserAttributeNames","resendConfirmationCode","result","getSession","idTokenKey","accessTokenKey","refreshTokenKey","clockDriftKey","idToken","IdToken","accessToken","refreshToken","RefreshToken","clockDrift","parseInt","sessionData","ClockDrift","cachedSession","_this15","wrappedCallback","wrapRefreshSessionCallback","REFRESH_TOKEN","lastUserKey","deviceKeyKey","authenticationResult","hasOwnProperty","call","setItem","getIdToken","getClockDrift","removeItem","clearCachedTokens","randomPasswordKey","deviceGroupKeyKey","forgotPassword","inputVerificationCode","confirmPassword","Password","getAttributeVerificationCode","attributeName","verifyAttribute","Code","getDevice","forgetSpecificDevice","forgetDevice","_this16","setDeviceStatusRemembered","DeviceRememberedStatus","setDeviceStatusNotRemembered","listDevices","limit","paginationToken","requestParams","Limit","PaginationToken","globalSignOut","_this17","signOut","revokeTokenCallback","_this18","cleanClientData","error","_session","revokeTokens","tokensToBeRevoked","_error","isSessionRevocable","revokeToken","token","decodePayload","_token$decodePayload","origin_jti","_ref2","requestWithRetry","Token","sendMFASelectionAnswer","_this19","associateSoftwareToken","_this20","associateSecretCode","SecretCode","verifySoftwareToken","totpCode","friendlyDeviceName","_this21","UserCode","FriendlyDeviceName","errRespond","dataRespond","default"],"sources":["C:/Users/kmath/Documents/Booz/nachoProblem/techx-project5/node_modules/amazon-cognito-identity-js/es/CognitoUser.js"],"sourcesContent":["/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js/core';\nimport TypedArrays from 'crypto-js/lib-typedarrays'; // necessary for crypto js\n\nimport Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\nvar isBrowser = typeof navigator !== 'undefined';\nvar userAgent = isBrowser ? navigator.userAgent : 'nodejs';\n/** @class */\n\nvar CognitoUser = /*#__PURE__*/function () {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   * @param {object} data.Storage Optional storage object.\n   */\n  function CognitoUser(data) {\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and Pool information are required.');\n    }\n\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n    this.client = data.Pool.client;\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n    this.storage = data.Storage || new StorageHelper().getStorage();\n    this.keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    this.userDataKey = this.keyPrefix + \".\" + this.username + \".userData\";\n  }\n  /**\n   * Sets the session for this user\n   * @param {CognitoUserSession} signInUserSession the session\n   * @returns {void}\n   */\n\n\n  var _proto = CognitoUser.prototype;\n\n  _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n    this.clearCachedUserData();\n    this.signInUserSession = signInUserSession;\n    this.cacheTokens();\n  }\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */\n  ;\n\n  _proto.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  }\n  /**\n   * @returns {string} the user's username\n   */\n  ;\n\n  _proto.getUsername = function getUsername() {\n    return this.username;\n  }\n  /**\n   * @returns {String} the authentication flow type\n   */\n  ;\n\n  _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  }\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  }\n  /**\n   * This is used for authenticating the user through the custom authentication flow.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.initiateAuth = function initiateAuth(authDetails, callback) {\n    var _this = this;\n\n    var authParameters = authDetails.getAuthParameters();\n    authParameters.USERNAME = this.username;\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'CUSTOM_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = data.ChallengeName;\n      var challengeParameters = data.ChallengeParameters;\n\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        _this.Session = data.Session;\n        return callback.customChallenge(challengeParameters);\n      }\n\n      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n\n      _this.cacheTokens();\n\n      return callback.onSuccess(_this.signInUserSession);\n    });\n  }\n  /**\n   * This is used for authenticating the user.\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUser = function authenticateUser(authDetails, callback) {\n    if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n      return this.authenticateUserPlainUsernamePassword(authDetails, callback);\n    } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n      return this.authenticateUserDefaultAuth(authDetails, callback);\n    }\n\n    return callback.onFailure(new Error('Authentication flow type is invalid.'));\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * It calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n    var _this2 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var dateHelper = new DateHelper();\n    var serverBValue;\n    var salt;\n    var authParameters = {};\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    authParameters.USERNAME = this.username;\n    authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n      // getLargeAValue callback start\n      if (errOnAValue) {\n        callback.onFailure(errOnAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n\n      if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n        authParameters.CHALLENGE_NAME = 'SRP_A';\n      }\n\n      var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n      var jsonReq = {\n        AuthFlow: _this2.authenticationFlowType,\n        ClientId: _this2.pool.getClientId(),\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetaData\n      };\n\n      if (_this2.getUserContextData(_this2.username)) {\n        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n      }\n\n      _this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        _this2.username = challengeParameters.USER_ID_FOR_SRP;\n        _this2.userDataKey = _this2.keyPrefix + \".\" + _this2.username + \".userData\";\n        serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        salt = new BigInteger(challengeParameters.SALT, 16);\n\n        _this2.getCachedDeviceKeyAndPassword();\n\n        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errOnHkdf) {\n            callback.onFailure(errOnHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this2.pool.getUserPoolId().split('_')[1], 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this2.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n          if (_this2.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = _this2.deviceKey;\n          }\n\n          var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n            return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n              if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n                challengeResponses.DEVICE_KEY = null;\n                _this2.deviceKey = null;\n                _this2.randomPassword = null;\n                _this2.deviceGroupKey = null;\n\n                _this2.clearCachedDeviceKeyAndPassword();\n\n                return respondToAuthChallenge(challenge, challengeCallback);\n              }\n\n              return challengeCallback(errChallenge, dataChallenge);\n            });\n          };\n\n          var jsonReqResp = {\n            ChallengeName: 'PASSWORD_VERIFIER',\n            ClientId: _this2.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session,\n            ClientMetadata: clientMetaData\n          };\n\n          if (_this2.getUserContextData()) {\n            jsonReqResp.UserContextData = _this2.getUserContextData();\n          }\n\n          respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n          });\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n    var _this3 = this;\n\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.PASSWORD = authDetails.getPassword();\n\n    if (!authParameters.PASSWORD) {\n      callback.onFailure(new Error('PASSWORD parameter is required'));\n      return;\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'USER_PASSWORD_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n\n    if (this.getUserContextData(this.username)) {\n      jsonReq.UserContextData = this.getUserContextData(this.username);\n    } // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n    // Cognito UserPools verifies password and returns tokens.\n\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {object} dataAuthenticate authentication data\n   * @param {object} authenticationHelper helper created\n   * @param {callback} callback passed on from caller\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    var _this4 = this;\n\n    var challengeName = dataAuthenticate.ChallengeName;\n    var challengeParameters = dataAuthenticate.ChallengeParameters;\n\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SELECT_MFA_TYPE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.selectMFAType(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'MFA_SETUP') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaSetup(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.totpRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n\n    if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n      this.Session = dataAuthenticate.Session;\n      var userAttributes = null;\n      var rawRequiredAttributes = null;\n      var requiredAttributes = [];\n      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\n      if (challengeParameters) {\n        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n      }\n\n      if (rawRequiredAttributes) {\n        for (var i = 0; i < rawRequiredAttributes.length; i++) {\n          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n        }\n      }\n\n      return callback.newPasswordRequired(userAttributes, requiredAttributes);\n    }\n\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.Session = dataAuthenticate.Session;\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.challengeName = challengeName;\n    this.cacheTokens();\n    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n\n    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n      if (errGenHash) {\n        return callback.onFailure(errGenHash);\n      }\n\n      var deviceSecretVerifierConfig = {\n        Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n        PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n      };\n      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n      _this4.randomPassword = authenticationHelper.getRandomPassword();\n\n      _this4.client.request('ConfirmDevice', {\n        DeviceKey: newDeviceMetadata.DeviceKey,\n        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: userAgent\n      }, function (errConfirm, dataConfirm) {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n\n        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n        _this4.cacheDeviceKeyAndPassword();\n\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n        }\n\n        return callback.onSuccess(_this4.signInUserSession);\n      });\n\n      return undefined;\n    });\n    return undefined;\n  }\n  /**\n   * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n   * Pass the new password with any new user attributes to be updated.\n   * User attribute keys must be of format userAttributes.<attribute_name>.\n   * @param {string} newPassword new password for this user\n   * @param {object} requiredAttributeData map with values for all required attributes\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *         response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {\n    var _this5 = this;\n\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n    var finalUserAttributes = {};\n\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach(function (key) {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    var jsonReq = {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n\n      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   * @private\n   */\n  ;\n\n  _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {\n    var _this6 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n    var dateHelper = new DateHelper();\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authenticationHelper.getLargeAValue(function (errAValue, aValue) {\n      // getLargeAValue callback start\n      if (errAValue) {\n        callback.onFailure(errAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n      var jsonReq = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: _this6.pool.getClientId(),\n        ChallengeResponses: authParameters,\n        ClientMetadata: clientMetadata,\n        Session: _this6.Session\n      };\n\n      if (_this6.getUserContextData()) {\n        jsonReq.UserContextData = _this6.getUserContextData();\n      }\n\n      _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        var salt = new BigInteger(challengeParameters.SALT, 16);\n        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errHkdf) {\n            return callback.onFailure(errHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this6.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          challengeResponses.DEVICE_KEY = _this6.deviceKey;\n          var jsonReqResp = {\n            ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n            ClientId: _this6.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n\n          if (_this6.getUserContextData()) {\n            jsonReqResp.UserContextData = _this6.getUserContextData();\n          }\n\n          _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n            _this6.cacheTokens();\n\n            return callback.onSuccess(_this6.signInUserSession);\n          });\n\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  }\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmSignUp', jsonReq, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n  }\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challenge answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {\n    var _this7 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this7.authenticateUserInternal(data, authenticationHelper, callback);\n    });\n  }\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {string} mfaType The mfa we are replying to.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {\n    var _this8 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n    var mfaTypeSelection = mfaType || 'SMS_MFA';\n\n    if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n    }\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: mfaTypeSelection,\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = dataAuthenticate.ChallengeName;\n\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        _this8.getDeviceResponse(callback);\n\n        return undefined;\n      }\n\n      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n      _this8.cacheTokens();\n\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(_this8.signInUserSession);\n      }\n\n      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split('_')[1]);\n      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n        if (errGenHash) {\n          return callback.onFailure(errGenHash);\n        }\n\n        var deviceSecretVerifierConfig = {\n          Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n          PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n        };\n        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n        _this8.randomPassword = authenticationHelper.getRandomPassword();\n\n        _this8.client.request('ConfirmDevice', {\n          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n          DeviceName: userAgent\n        }, function (errConfirm, dataConfirm) {\n          if (errConfirm) {\n            return callback.onFailure(errConfirm);\n          }\n\n          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n          _this8.cacheDeviceKeyAndPassword();\n\n          if (dataConfirm.UserConfirmationNecessary === true) {\n            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n          }\n\n          return callback.onSuccess(_this8.signInUserSession);\n        });\n\n        return undefined;\n      });\n      return undefined;\n    });\n  }\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('ChangePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.enableMFA = function enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    var mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number'\n    };\n    mfaOptions.push(mfaEnabled);\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('SetUserMFAPreference', {\n      SMSMfaSettings: smsMfaSettings,\n      SoftwareTokenMfaSettings: softwareTokenMfaSettings,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to disable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.disableMFA = function disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to delete itself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.deleteUser = function deleteUser(callback, clientMetadata) {\n    var _this9 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      _this9.clearCachedUser();\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {\n    var _this10 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('UpdateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      } // update cached user\n\n\n      return _this10.getUserData(function () {\n        return callback(null, 'SUCCESS');\n      }, {\n        bypassCache: true\n      });\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getUserAttributes = function getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var attributeList = [];\n\n      for (var i = 0; i < userData.UserAttributes.length; i++) {\n        var attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value\n        };\n        var userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n\n      return callback(null, attributeList);\n    });\n    return undefined;\n  }\n  /**\n   * This was previously used by an authenticated user to get MFAOptions,\n   * but no longer returns a meaningful response. Refer to the documentation for\n   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n   * @deprecated\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getMFAOptions = function getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.createGetUserRequest = function createGetUserRequest() {\n    return this.client.promisifyRequest('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {\n    var _this11 = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    // best effort, if not possible\n    return new Promise(function (resolve) {\n      var refresh = _this11.signInUserSession.getRefreshToken();\n\n      if (refresh && refresh.getToken()) {\n        _this11.refreshSession(refresh, resolve, options.clientMetadata);\n      } else {\n        resolve();\n      }\n    });\n  }\n  /**\n   * @typedef {Object} GetUserDataOptions\n   * @property {boolean} bypassCache - force getting data from Cognito service\n   * @property {Record<string, string>} clientMetadata - clientMetadata for getSession\n   */\n\n  /**\n   * This is used by an authenticated users to get the userData\n   * @param {nodeCallback<UserData>} callback Called on success or error.\n   * @param {GetUserDataOptions} params\n   * @returns {void}\n   */\n  ;\n\n  _proto.getUserData = function getUserData(callback, params) {\n    var _this12 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.clearCachedUserData();\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var userData = this.getUserDataFromCache();\n\n    if (!userData) {\n      this.fetchUserData().then(function (data) {\n        callback(null, data);\n      })[\"catch\"](callback);\n      return;\n    }\n\n    if (this.isFetchUserDataAndTokenRequired(params)) {\n      this.fetchUserData().then(function (data) {\n        return _this12.refreshSessionIfPossible(params).then(function () {\n          return data;\n        });\n      }).then(function (data) {\n        return callback(null, data);\n      })[\"catch\"](callback);\n      return;\n    }\n\n    try {\n      callback(null, JSON.parse(userData));\n      return;\n    } catch (err) {\n      this.clearCachedUserData();\n      callback(err, null);\n      return;\n    }\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.getUserDataFromCache = function getUserDataFromCache() {\n    var userData = this.storage.getItem(this.userDataKey);\n    return userData;\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {\n    var _ref = params || {},\n        _ref$bypassCache = _ref.bypassCache,\n        bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;\n\n    return bypassCache;\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.fetchUserData = function fetchUserData() {\n    var _this13 = this;\n\n    return this.createGetUserRequest().then(function (data) {\n      _this13.cacheUserData(data);\n\n      return data;\n    });\n  }\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {\n    var _this14 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      } // update cached user\n\n\n      return _this14.getUserData(function () {\n        return callback(null, 'SUCCESS');\n      }, {\n        bypassCache: true\n      });\n    });\n    return undefined;\n  }\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, result);\n    });\n  }\n  /**\n   * @typedef {Object} GetSessionOptions\n   * @property {Record<string, string>} clientMetadata - clientMetadata for getSession\n   */\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {GetSessionOptions} options\n   * @returns {void}\n   */\n  ;\n\n  _proto.getSession = function getSession(callback, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var idTokenKey = keyPrefix + \".idToken\";\n    var accessTokenKey = keyPrefix + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".clockDrift\";\n\n    if (this.storage.getItem(idTokenKey)) {\n      var idToken = new CognitoIdToken({\n        IdToken: this.storage.getItem(idTokenKey)\n      });\n      var accessToken = new CognitoAccessToken({\n        AccessToken: this.storage.getItem(accessTokenKey)\n      });\n      var refreshToken = new CognitoRefreshToken({\n        RefreshToken: this.storage.getItem(refreshTokenKey)\n      });\n      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n      var sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n        ClockDrift: clockDrift\n      };\n      var cachedSession = new CognitoUserSession(sessionData);\n\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n\n      if (!refreshToken.getToken()) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n\n      this.refreshSession(refreshToken, callback, options.clientMetadata);\n    } else {\n      callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n    }\n\n    return undefined;\n  }\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {\n    var _this15 = this;\n\n    var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;\n    var authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n\n    if (this.storage.getItem(lastUserKey)) {\n      this.username = this.storage.getItem(lastUserKey);\n      var deviceKeyKey = keyPrefix + \".\" + this.username + \".deviceKey\";\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          _this15.clearCachedUser();\n        }\n\n        return wrappedCallback(err, null);\n      }\n\n      if (authResult) {\n        var authenticationResult = authResult.AuthenticationResult;\n\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n\n        _this15.signInUserSession = _this15.getCognitoUserSession(authenticationResult);\n\n        _this15.cacheTokens();\n\n        return wrappedCallback(null, _this15.signInUserSession);\n      }\n\n      return undefined;\n    });\n  }\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.cacheTokens = function cacheTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(clockDriftKey, \"\" + this.signInUserSession.getClockDrift());\n    this.storage.setItem(lastUserKey, this.username);\n  }\n  /**\n   * This is to cache user data\n   */\n  ;\n\n  _proto.cacheUserData = function cacheUserData(userData) {\n    this.storage.setItem(this.userDataKey, JSON.stringify(userData));\n  }\n  /**\n   * This is to remove cached user data\n   */\n  ;\n\n  _proto.clearCachedUserData = function clearCachedUserData() {\n    this.storage.removeItem(this.userDataKey);\n  };\n\n  _proto.clearCachedUser = function clearCachedUser() {\n    this.clearCachedTokens();\n    this.clearCachedUserData();\n  }\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */\n  ;\n\n  _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.setItem(deviceKeyKey, this.deviceKey);\n    this.storage.setItem(randomPasswordKey, this.randomPassword);\n    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  }\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */\n  ;\n\n  _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n\n    if (this.storage.getItem(deviceKeyKey)) {\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      this.randomPassword = this.storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n    }\n  }\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.removeItem(deviceKeyKey);\n    this.storage.removeItem(randomPasswordKey);\n    this.storage.removeItem(deviceGroupKeyKey);\n  }\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.clearCachedTokens = function clearCachedTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(clockDriftKey);\n  }\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */\n  ;\n\n  _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {\n    var idToken = new CognitoIdToken(authResult);\n    var accessToken = new CognitoAccessToken(authResult);\n    var refreshToken = new CognitoRefreshToken(authResult);\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken\n    };\n    return new CognitoUserSession(sessionData);\n  }\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ForgotPassword', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess(data);\n    });\n  }\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n  }\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('VerifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getDevice = function getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('ForgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgetDevice = function forgetDevice(callback) {\n    var _this16 = this;\n\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: function onSuccess(result) {\n        _this16.deviceKey = null;\n        _this16.deviceGroupKey = null;\n        _this16.randomPassword = null;\n\n        _this16.clearCachedDeviceKeyAndPassword();\n\n        return callback.onSuccess(result);\n      }\n    });\n  }\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string | null} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */\n  ;\n\n  _proto.listDevices = function listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    var requestParams = {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit\n    };\n\n    if (paginationToken) {\n      requestParams.PaginationToken = paginationToken;\n    }\n\n    this.client.request('ListDevices', requestParams, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.globalSignOut = function globalSignOut(callback) {\n    var _this17 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GlobalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this17.clearCachedUser();\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */\n  ;\n\n  _proto.signOut = function signOut(revokeTokenCallback) {\n    var _this18 = this;\n\n    // If tokens won't be revoked, we just clean the client data.\n    if (!revokeTokenCallback || typeof revokeTokenCallback !== 'function') {\n      this.cleanClientData();\n      return;\n    }\n\n    this.getSession(function (error, _session) {\n      if (error) {\n        return revokeTokenCallback(error);\n      }\n\n      _this18.revokeTokens(function (err) {\n        _this18.cleanClientData();\n\n        revokeTokenCallback(err);\n      });\n    });\n  };\n\n  _proto.revokeTokens = function revokeTokens(revokeTokenCallback) {\n    if (revokeTokenCallback === void 0) {\n      revokeTokenCallback = function revokeTokenCallback() {};\n    }\n\n    if (typeof revokeTokenCallback !== 'function') {\n      throw new Error('Invalid revokeTokenCallback. It should be a function.');\n    }\n\n    var tokensToBeRevoked = [];\n\n    if (!this.signInUserSession) {\n      var error = new Error('User is not authenticated');\n      return revokeTokenCallback(error);\n    }\n\n    if (!this.signInUserSession.getAccessToken()) {\n      var _error = new Error('No Access token available');\n\n      return revokeTokenCallback(_error);\n    }\n\n    var refreshToken = this.signInUserSession.getRefreshToken().getToken();\n    var accessToken = this.signInUserSession.getAccessToken();\n\n    if (this.isSessionRevocable(accessToken)) {\n      if (refreshToken) {\n        return this.revokeToken({\n          token: refreshToken,\n          callback: revokeTokenCallback\n        });\n      }\n    }\n\n    revokeTokenCallback();\n  };\n\n  _proto.isSessionRevocable = function isSessionRevocable(token) {\n    if (token && typeof token.decodePayload === 'function') {\n      try {\n        var _token$decodePayload = token.decodePayload(),\n            origin_jti = _token$decodePayload.origin_jti;\n\n        return !!origin_jti;\n      } catch (err) {// Nothing to do, token doesnt have origin_jti claim\n      }\n    }\n\n    return false;\n  };\n\n  _proto.cleanClientData = function cleanClientData() {\n    this.signInUserSession = null;\n    this.clearCachedUser();\n  };\n\n  _proto.revokeToken = function revokeToken(_ref2) {\n    var token = _ref2.token,\n        callback = _ref2.callback;\n    this.client.requestWithRetry('RevokeToken', {\n      Token: token,\n      ClientId: this.pool.getClientId()\n    }, function (err) {\n      if (err) {\n        return callback(err);\n      }\n\n      callback();\n    });\n  }\n  /**\n   * This is used by a user trying to select a given MFA\n   * @param {string} answerChallenge the mfa the user wants\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n    var _this19 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var jsonReq = {\n      ChallengeName: 'SELECT_MFA_TYPE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this19.Session = data.Session;\n\n      if (answerChallenge === 'SMS_MFA') {\n        return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);\n      }\n\n      if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n        return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);\n      }\n\n      return undefined;\n    });\n  }\n  /**\n   * This returns the user context data for advanced security feature.\n   * @returns {string} the user context data from CognitoUserPool\n   */\n  ;\n\n  _proto.getUserContextData = function getUserContextData() {\n    var pool = this.pool;\n    return pool.getUserContextData(this.username);\n  }\n  /**\n   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.associateSoftwareToken = function associateSoftwareToken(callback) {\n    var _this20 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('AssociateSoftwareToken', {\n        Session: this.Session\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this20.Session = data.Session;\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    } else {\n      this.client.request('AssociateSoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    }\n  }\n  /**\n   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n   * @param {string} totpCode The MFA code entered by the user.\n   * @param {string} friendlyDeviceName The device name we are assigning to the device.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n    var _this21 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('VerifySoftwareToken', {\n        Session: this.Session,\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this21.Session = data.Session;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = _this21.username;\n        var jsonReq = {\n          ChallengeName: 'MFA_SETUP',\n          ClientId: _this21.pool.getClientId(),\n          ChallengeResponses: challengeResponses,\n          Session: _this21.Session\n        };\n\n        if (_this21.getUserContextData()) {\n          jsonReq.UserContextData = _this21.getUserContextData();\n        }\n\n        _this21.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n          if (errRespond) {\n            return callback.onFailure(errRespond);\n          }\n\n          _this21.signInUserSession = _this21.getCognitoUserSession(dataRespond.AuthenticationResult);\n\n          _this21.cacheTokens();\n\n          return callback.onSuccess(_this21.signInUserSession);\n        });\n\n        return undefined;\n      });\n    } else {\n      this.client.request('VerifySoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.onSuccess(data);\n      });\n    }\n  };\n\n  return CognitoUser;\n}();\n\nexport { CognitoUser as default };"],"mappings":"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"},"metadata":{},"sourceType":"module"}