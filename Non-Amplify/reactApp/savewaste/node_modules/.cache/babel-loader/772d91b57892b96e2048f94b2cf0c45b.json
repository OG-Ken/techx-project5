{"ast":null,"code":"/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport Client from './Client';\nimport CognitoUser from './CognitoUser';\nimport StorageHelper from './StorageHelper';\nvar USER_POOL_ID_MAX_LENGTH = 55;\n/** @class */\n\nvar CognitoUserPool = /*#__PURE__*/function () {\n  /**\n   * Constructs a new CognitoUserPool object\n   * @param {object} data Creation options.\n   * @param {string} data.UserPoolId Cognito user pool id.\n   * @param {string} data.ClientId User pool application client id.\n   * @param {string} data.endpoint Optional custom service endpoint.\n   * @param {object} data.fetchOptions Optional options for fetch API.\n   *        (only credentials option is supported)\n   * @param {object} data.Storage Optional storage object.\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:\n   *        boolean flag indicating if the data collection is enabled\n   *        to support cognito advanced security features. By default, this\n   *        flag is set to true.\n   */\n  function CognitoUserPool(data, wrapRefreshSessionCallback) {\n    var _ref = data || {},\n        UserPoolId = _ref.UserPoolId,\n        ClientId = _ref.ClientId,\n        endpoint = _ref.endpoint,\n        fetchOptions = _ref.fetchOptions,\n        AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;\n\n    if (!UserPoolId || !ClientId) {\n      throw new Error('Both UserPoolId and ClientId are required.');\n    }\n\n    if (UserPoolId.length > USER_POOL_ID_MAX_LENGTH || !/^[\\w-]+_[0-9a-zA-Z]+$/.test(UserPoolId)) {\n      throw new Error('Invalid UserPoolId format.');\n    }\n\n    var region = UserPoolId.split('_')[0];\n    this.userPoolId = UserPoolId;\n    this.clientId = ClientId;\n    this.client = new Client(region, endpoint, fetchOptions);\n    /**\n     * By default, AdvancedSecurityDataCollectionFlag is set to true,\n     * if no input value is provided.\n     */\n\n    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;\n    this.storage = data.Storage || new StorageHelper().getStorage();\n\n    if (wrapRefreshSessionCallback) {\n      this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;\n    }\n  }\n  /**\n   * @returns {string} the user pool id\n   */\n\n\n  var _proto = CognitoUserPool.prototype;\n\n  _proto.getUserPoolId = function getUserPoolId() {\n    return this.userPoolId;\n  }\n  /**\n   * @returns {string} the client id\n   */\n  ;\n\n  _proto.getClientId = function getClientId() {\n    return this.clientId;\n  }\n  /**\n   * @typedef {object} SignUpResult\n   * @property {CognitoUser} user New user.\n   * @property {bool} userConfirmed If the user is already confirmed.\n   */\n\n  /**\n   * method for signing up a user\n   * @param {string} username User's username.\n   * @param {string} password Plain-text initial password entered by user.\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\n   * @param {(AttributeArg[])=} validationData Application metadata.\n   * @param {(AttributeArg[])=} clientMetadata Client metadata.\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {\n    var _this = this;\n\n    var jsonReq = {\n      ClientId: this.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: userAttributes,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData(username)) {\n      jsonReq.UserContextData = this.getUserContextData(username);\n    }\n\n    this.client.request('SignUp', jsonReq, function (err, data) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var cognitoUser = {\n        Username: username,\n        Pool: _this,\n        Storage: _this.storage\n      };\n      var returnData = {\n        user: new CognitoUser(cognitoUser),\n        userConfirmed: data.UserConfirmed,\n        userSub: data.UserSub,\n        codeDeliveryDetails: data.CodeDeliveryDetails\n      };\n      return callback(null, returnData);\n    });\n  }\n  /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoUser} the user retrieved from storage\n   */\n  ;\n\n  _proto.getCurrentUser = function getCurrentUser() {\n    var lastUserKey = \"CognitoIdentityServiceProvider.\" + this.clientId + \".LastAuthUser\";\n    var lastAuthUser = this.storage.getItem(lastUserKey);\n\n    if (lastAuthUser) {\n      var cognitoUser = {\n        Username: lastAuthUser,\n        Pool: this,\n        Storage: this.storage\n      };\n      return new CognitoUser(cognitoUser);\n    }\n\n    return null;\n  }\n  /**\n   * This method returns the encoded data string used for cognito advanced security feature.\n   * This would be generated only when developer has included the JS used for collecting the\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\n   * features\n   * @param {string} username the username for the context data\n   * @returns {string} the user context data\n   **/\n  ;\n\n  _proto.getUserContextData = function getUserContextData(username) {\n    if (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {\n      return undefined;\n    }\n    /* eslint-disable */\n\n\n    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;\n    /* eslint-enable */\n\n    if (this.advancedSecurityDataCollectionFlag) {\n      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);\n\n      if (advancedSecurityData) {\n        var userContextData = {\n          EncodedData: advancedSecurityData\n        };\n        return userContextData;\n      }\n    }\n\n    return {};\n  };\n\n  return CognitoUserPool;\n}();\n\nexport { CognitoUserPool as default };","map":{"version":3,"names":["Client","CognitoUser","StorageHelper","USER_POOL_ID_MAX_LENGTH","CognitoUserPool","data","wrapRefreshSessionCallback","_ref","UserPoolId","ClientId","endpoint","fetchOptions","AdvancedSecurityDataCollectionFlag","Error","length","test","region","split","userPoolId","clientId","client","advancedSecurityDataCollectionFlag","storage","Storage","getStorage","_proto","prototype","getUserPoolId","getClientId","signUp","username","password","userAttributes","validationData","callback","clientMetadata","_this","jsonReq","Username","Password","UserAttributes","ValidationData","ClientMetadata","getUserContextData","UserContextData","request","err","cognitoUser","Pool","returnData","user","userConfirmed","UserConfirmed","userSub","UserSub","codeDeliveryDetails","CodeDeliveryDetails","getCurrentUser","lastUserKey","lastAuthUser","getItem","AmazonCognitoAdvancedSecurityData","undefined","amazonCognitoAdvancedSecurityDataConst","advancedSecurityData","getData","userContextData","EncodedData","default"],"sources":["C:/Users/kmath/Documents/Booz/nachoProblem/techx-project5/node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js"],"sourcesContent":["/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport Client from './Client';\nimport CognitoUser from './CognitoUser';\nimport StorageHelper from './StorageHelper';\nvar USER_POOL_ID_MAX_LENGTH = 55;\n/** @class */\n\nvar CognitoUserPool = /*#__PURE__*/function () {\n  /**\n   * Constructs a new CognitoUserPool object\n   * @param {object} data Creation options.\n   * @param {string} data.UserPoolId Cognito user pool id.\n   * @param {string} data.ClientId User pool application client id.\n   * @param {string} data.endpoint Optional custom service endpoint.\n   * @param {object} data.fetchOptions Optional options for fetch API.\n   *        (only credentials option is supported)\n   * @param {object} data.Storage Optional storage object.\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:\n   *        boolean flag indicating if the data collection is enabled\n   *        to support cognito advanced security features. By default, this\n   *        flag is set to true.\n   */\n  function CognitoUserPool(data, wrapRefreshSessionCallback) {\n    var _ref = data || {},\n        UserPoolId = _ref.UserPoolId,\n        ClientId = _ref.ClientId,\n        endpoint = _ref.endpoint,\n        fetchOptions = _ref.fetchOptions,\n        AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;\n\n    if (!UserPoolId || !ClientId) {\n      throw new Error('Both UserPoolId and ClientId are required.');\n    }\n\n    if (UserPoolId.length > USER_POOL_ID_MAX_LENGTH || !/^[\\w-]+_[0-9a-zA-Z]+$/.test(UserPoolId)) {\n      throw new Error('Invalid UserPoolId format.');\n    }\n\n    var region = UserPoolId.split('_')[0];\n    this.userPoolId = UserPoolId;\n    this.clientId = ClientId;\n    this.client = new Client(region, endpoint, fetchOptions);\n    /**\n     * By default, AdvancedSecurityDataCollectionFlag is set to true,\n     * if no input value is provided.\n     */\n\n    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;\n    this.storage = data.Storage || new StorageHelper().getStorage();\n\n    if (wrapRefreshSessionCallback) {\n      this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;\n    }\n  }\n  /**\n   * @returns {string} the user pool id\n   */\n\n\n  var _proto = CognitoUserPool.prototype;\n\n  _proto.getUserPoolId = function getUserPoolId() {\n    return this.userPoolId;\n  }\n  /**\n   * @returns {string} the client id\n   */\n  ;\n\n  _proto.getClientId = function getClientId() {\n    return this.clientId;\n  }\n  /**\n   * @typedef {object} SignUpResult\n   * @property {CognitoUser} user New user.\n   * @property {bool} userConfirmed If the user is already confirmed.\n   */\n\n  /**\n   * method for signing up a user\n   * @param {string} username User's username.\n   * @param {string} password Plain-text initial password entered by user.\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\n   * @param {(AttributeArg[])=} validationData Application metadata.\n   * @param {(AttributeArg[])=} clientMetadata Client metadata.\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {\n    var _this = this;\n\n    var jsonReq = {\n      ClientId: this.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: userAttributes,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData(username)) {\n      jsonReq.UserContextData = this.getUserContextData(username);\n    }\n\n    this.client.request('SignUp', jsonReq, function (err, data) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var cognitoUser = {\n        Username: username,\n        Pool: _this,\n        Storage: _this.storage\n      };\n      var returnData = {\n        user: new CognitoUser(cognitoUser),\n        userConfirmed: data.UserConfirmed,\n        userSub: data.UserSub,\n        codeDeliveryDetails: data.CodeDeliveryDetails\n      };\n      return callback(null, returnData);\n    });\n  }\n  /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoUser} the user retrieved from storage\n   */\n  ;\n\n  _proto.getCurrentUser = function getCurrentUser() {\n    var lastUserKey = \"CognitoIdentityServiceProvider.\" + this.clientId + \".LastAuthUser\";\n    var lastAuthUser = this.storage.getItem(lastUserKey);\n\n    if (lastAuthUser) {\n      var cognitoUser = {\n        Username: lastAuthUser,\n        Pool: this,\n        Storage: this.storage\n      };\n      return new CognitoUser(cognitoUser);\n    }\n\n    return null;\n  }\n  /**\n   * This method returns the encoded data string used for cognito advanced security feature.\n   * This would be generated only when developer has included the JS used for collecting the\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\n   * features\n   * @param {string} username the username for the context data\n   * @returns {string} the user context data\n   **/\n  ;\n\n  _proto.getUserContextData = function getUserContextData(username) {\n    if (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {\n      return undefined;\n    }\n    /* eslint-disable */\n\n\n    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;\n    /* eslint-enable */\n\n    if (this.advancedSecurityDataCollectionFlag) {\n      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);\n\n      if (advancedSecurityData) {\n        var userContextData = {\n          EncodedData: advancedSecurityData\n        };\n        return userContextData;\n      }\n    }\n\n    return {};\n  };\n\n  return CognitoUserPool;\n}();\n\nexport { CognitoUserPool as default };"],"mappings":"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"},"metadata":{},"sourceType":"module"}