{"ast":null,"code":"import { useEffect, useLayoutEffect as useLayoutEffect$1, useRef, createContext, useContext, useMemo, useState, useCallback, memo, forwardRef, useImperativeHandle } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\nimport { jsxs, jsx, Fragment } from 'react/jsx-runtime';\nconst cell = \"c1wupbe7-0-0-beta-18\";\nconst cellClassname = `rdg-cell ${cell}`;\nconst autosizeColumnsClassname = \"ad0kgiy7-0-0-beta-18\";\nconst cellFrozen = \"c1730fa47-0-0-beta-18\";\nconst cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\nconst cellFrozenLast = \"c9dpaye7-0-0-beta-18\";\nconst cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\nconst root = \"r104f42s7-0-0-beta-18\";\nconst rootClassname = `rdg ${root}`;\nconst viewportDragging = \"v7ly7s7-0-0-beta-18\";\nconst viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\nconst focusSinkClassname = \"fc4f4zb7-0-0-beta-18\";\nconst row = \"r1otpg647-0-0-beta-18\";\nconst rowClassname = `rdg-row ${row}`;\nconst rowSelected = \"rel5gk27-0-0-beta-18\";\nconst rowSelectedClassname = `rdg-row-selected`;\nconst rowSelectedWithFrozenCell = \"r1qymf1z7-0-0-beta-18\";\nconst checkboxLabel = \"c8rwwhf7-0-0-beta-18\";\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\nconst checkboxInput = \"c1rb4brs7-0-0-beta-18\";\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\nconst checkbox = \"c1bvvwcc7-0-0-beta-18\";\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\nconst checkboxLabelDisabled = \"c1yg790j7-0-0-beta-18\";\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nfunction checkboxFormatter(_ref, ref) {\n  let {\n    onChange,\n    ...props\n  } = _ref;\n\n  function handleChange(e) {\n    onChange(e.target.checked, e.nativeEvent.shiftKey);\n  }\n\n  return /*#__PURE__*/jsxs(\"label\", {\n    className: clsx(checkboxLabelClassname, props.disabled && checkboxLabelDisabledClassname),\n    children: [/*#__PURE__*/jsx(\"input\", {\n      type: \"checkbox\",\n      ref: ref,\n      ...props,\n      className: checkboxInputClassname,\n      onChange: handleChange\n    }), /*#__PURE__*/jsx(\"div\", {\n      className: checkboxClassname\n    })]\n  });\n}\n\nconst useLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect$1;\n\nfunction useFocusRef(isSelected) {\n  const ref = useRef(null);\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({\n      preventScroll: true\n    });\n  }, [isSelected]);\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n\nconst DataGridDefaultComponentsContext = /*#__PURE__*/createContext(undefined);\nconst DataGridDefaultComponentsProvider = DataGridDefaultComponentsContext.Provider;\n\nfunction useDefaultComponents() {\n  return useContext(DataGridDefaultComponentsContext);\n}\n\nfunction SelectCellFormatter(_ref2) {\n  let {\n    value,\n    isCellSelected,\n    disabled,\n    onChange,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy\n  } = _ref2;\n  const {\n    ref,\n    tabIndex\n  } = useFocusRef(isCellSelected);\n  const checkboxFormatter = useDefaultComponents().checkboxFormatter;\n  return /*#__PURE__*/jsx(Fragment, {\n    children: checkboxFormatter({\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      tabIndex,\n      disabled,\n      checked: value,\n      onChange\n    }, ref)\n  });\n}\n\nfunction valueFormatter(props) {\n  try {\n    return /*#__PURE__*/jsx(Fragment, {\n      children: props.row[props.column.key]\n    });\n  } catch {\n    return null;\n  }\n}\n\nconst groupCellContent = \"gb8l2vs7-0-0-beta-18\";\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\nconst caret = \"c1ggynjl7-0-0-beta-18\";\nconst caretClassname = `rdg-caret ${caret}`;\n\nfunction toggleGroupFormatter(props) {\n  return /*#__PURE__*/jsx(ToggleGroup, { ...props\n  });\n}\n\nfunction ToggleGroup(_ref3) {\n  let {\n    groupKey,\n    isExpanded,\n    isCellSelected,\n    toggleGroup\n  } = _ref3;\n  const {\n    ref,\n    tabIndex\n  } = useFocusRef(isCellSelected);\n\n  function handleKeyDown(_ref4) {\n    let {\n      key\n    } = _ref4;\n\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n  return /*#__PURE__*/jsxs(\"span\", {\n    ref: ref,\n    className: groupCellContentClassname,\n    tabIndex: tabIndex,\n    onKeyDown: handleKeyDown,\n    children: [groupKey, /*#__PURE__*/jsx(\"svg\", {\n      viewBox: \"0 0 14 8\",\n      width: \"14\",\n      height: \"8\",\n      className: caretClassname,\n      \"aria-hidden\": true,\n      children: /*#__PURE__*/jsx(\"path\", {\n        d: d\n      })\n    })]\n  });\n}\n\nconst RowSelectionContext = /*#__PURE__*/createContext(undefined);\nconst RowSelectionProvider = RowSelectionContext.Provider;\nconst RowSelectionChangeContext = /*#__PURE__*/createContext(undefined);\nconst RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nfunction useRowSelection() {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n\nconst SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select\",\n    isCellSelected: props.isCellSelected,\n    value: isRowSelected,\n    onChange: (checked, isShiftClick) => {\n      onRowSelectionChange({\n        row: props.row,\n        checked,\n        isShiftClick\n      });\n    }\n  });\n}\n\nfunction SelectGroupFormatter(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select Group\",\n    isCellSelected: props.isCellSelected,\n    value: isRowSelected,\n    onChange: checked => {\n      onRowSelectionChange({\n        row: props.row,\n        checked,\n        isShiftClick: false\n      });\n    }\n  });\n}\n\nconst SelectColumn = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n\n  headerRenderer(props) {\n    return /*#__PURE__*/jsx(SelectCellFormatter, {\n      \"aria-label\": \"Select All\",\n      isCellSelected: props.isCellSelected,\n      value: props.allRowsSelected,\n      onChange: props.onAllRowsSelectionChange\n    });\n  },\n\n  formatter(props) {\n    return /*#__PURE__*/jsx(SelectFormatter, { ...props\n    });\n  },\n\n  groupFormatter(props) {\n    return /*#__PURE__*/jsx(SelectGroupFormatter, { ...props\n    });\n  }\n\n};\n\nfunction getColSpan(column, lastFrozenColumnIndex, args) {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n\n  if (Number.isInteger(colSpan) && colSpan > 1 && (!column.frozen || column.idx + colSpan - 1 <= lastFrozenColumnIndex)) {\n    return colSpan;\n  }\n\n  return undefined;\n}\n\nfunction scrollIntoView(element) {\n  element?.scrollIntoView({\n    inline: 'nearest',\n    block: 'nearest'\n  });\n}\n\nconst nonInputKeys = new Set(['Unidentified', 'Alt', 'AltGraph', 'CapsLock', 'Control', 'Fn', 'FnLock', 'Meta', 'NumLock', 'ScrollLock', 'Shift', 'Tab', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'End', 'Home', 'PageDown', 'PageUp', 'Insert', 'ContextMenu', 'Escape', 'Pause', 'Play', 'PrintScreen', 'F1', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12']);\n\nfunction isCtrlKeyHeldDown(e) {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nfunction isDefaultCellInput(event) {\n  return !nonInputKeys.has(event.key);\n}\n\nfunction onEditorNavigation(_ref5) {\n  let {\n    key,\n    target\n  } = _ref5;\n\n  if (key === 'Tab' && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n    return target.matches('.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child');\n  }\n\n  return false;\n}\n\nconst measuringCellClassname = \"m1l09lto7-0-0-beta-18\";\n\nfunction renderMeasuringCells(_ref6) {\n  let {\n    viewportColumns\n  } = _ref6;\n  return /*#__PURE__*/jsx(Fragment, {\n    children: viewportColumns.map(_ref7 => {\n      let {\n        key,\n        idx,\n        minWidth,\n        maxWidth\n      } = _ref7;\n      return /*#__PURE__*/jsx(\"div\", {\n        className: measuringCellClassname,\n        style: {\n          gridColumnStart: idx + 1,\n          minWidth,\n          maxWidth\n        },\n        \"data-measuring-cell-key\": key\n      }, key);\n    })\n  });\n}\n\nfunction isSelectedCellEditable(_ref8) {\n  let {\n    selectedPosition,\n    columns,\n    rows,\n    isGroupRow\n  } = _ref8;\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nfunction isCellEditable(column, row) {\n  return column.editor != null && !column.rowGroup && (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false;\n}\n\nfunction getSelectedCellColSpan(_ref9) {\n  let {\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowIdx,\n    lastFrozenColumnIndex,\n    column,\n    isGroupRow\n  } = _ref9;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'HEADER'\n    });\n  }\n\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, {\n        type: 'ROW',\n        row\n      });\n    }\n\n    return undefined;\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nfunction getNextSelectedCellPosition(_ref10) {\n  let {\n    cellNavigationMode,\n    columns,\n    colSpanColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    minRowIdx,\n    maxRowIdx,\n    currentPosition: {\n      idx: currentIdx\n    },\n    nextPosition,\n    lastFrozenColumnIndex,\n    isCellWithinBounds,\n    isGroupRow\n  } = _ref10;\n  let {\n    idx: nextIdx,\n    rowIdx: nextRowIdx\n  } = nextPosition;\n\n  const setColSpan = moveRight => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n\n      setColSpan(false);\n    }\n  }\n\n  return {\n    idx: nextIdx,\n    rowIdx: nextRowIdx\n  };\n}\n\nfunction canExitGrid(_ref11) {\n  let {\n    cellNavigationMode,\n    maxColIdx,\n    minRowIdx,\n    maxRowIdx,\n    selectedPosition: {\n      rowIdx,\n      idx\n    },\n    shiftKey\n  } = _ref11;\n\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n\nfunction getRowStyle(rowIdx, height) {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    };\n  }\n\n  return {\n    '--rdg-grid-row-start': rowIdx\n  };\n}\n\nfunction getCellStyle(column, colSpan) {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nfunction getCellClassname(column) {\n  for (var _len = arguments.length, extraClasses = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    extraClasses[_key - 1] = arguments[_key];\n  }\n\n  return clsx(cellClassname, ...extraClasses, column.frozen && cellFrozenClassname, column.isLastFrozenColumn && cellFrozenLastClassname);\n}\n\nconst {\n  min,\n  max,\n  round,\n  floor,\n  sign,\n  abs,\n  ceil\n} = Math;\n\nfunction assertIsValidKeyGetter(keyGetter) {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nfunction clampColumnWidth(width, _ref12) {\n  let {\n    minWidth,\n    maxWidth\n  } = _ref12;\n  width = max(width, minWidth);\n\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 80;\n\nfunction useCalculatedColumns(_ref13) {\n  let {\n    rawColumns,\n    columnWidths,\n    viewportWidth,\n    scrollLeft,\n    defaultColumnOptions,\n    rawGroupBy,\n    enableVirtualization\n  } = _ref13;\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? valueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    groupBy\n  } = useMemo(() => {\n    const groupBy = [];\n    let lastFrozenColumnIndex = -1;\n    const columns = rawColumns.map(rawColumn => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      const frozen = rowGroup || rawColumn.frozen || false;\n      const column = { ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ?? (column.groupFormatter = toggleGroupFormatter);\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n    columns.sort((_ref14, _ref15) => {\n      let {\n        key: aKey,\n        frozen: frozenA\n      } = _ref14;\n      let {\n        key: bKey,\n        frozen: frozenB\n      } = _ref15;\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n\n        return -1;\n      }\n\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n\n      if (frozenB) return 1;\n      return 0;\n    });\n    const colSpanColumns = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultWidth, defaultMinWidth, defaultMaxWidth, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n  const {\n    layoutCssVars,\n    totalFrozenColumnWidth,\n    columnMetrics\n  } = useMemo(() => {\n    const columnMetrics = new Map();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n\n    for (const column of columns) {\n      let width = columnWidths.get(column.key) ?? column.width;\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        width = column.minWidth;\n      }\n\n      templateColumns += `${width}px `;\n      columnMetrics.set(column, {\n        width,\n        left\n      });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex]);\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars = {\n      gridTemplateColumns: templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column).left}px`;\n    }\n\n    return {\n      layoutCssVars,\n      totalFrozenColumnWidth,\n      columnMetrics\n    };\n  }, [columnWidths, columns, lastFrozenColumnIndex]);\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo(() => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n\n    while (colVisibleStartIdx < lastColIdx) {\n      const {\n        left,\n        width\n      } = columnMetrics.get(columns[colVisibleStartIdx]);\n\n      if (left + width > viewportLeft) {\n        break;\n      }\n\n      colVisibleStartIdx++;\n    }\n\n    let colVisibleEndIdx = colVisibleStartIdx;\n\n    while (colVisibleEndIdx < lastColIdx) {\n      const {\n        left,\n        width\n      } = columnMetrics.get(columns[colVisibleEndIdx]);\n\n      if (left + width >= viewportRight) {\n        break;\n      }\n\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columnMetrics, columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth, enableVirtualization]);\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction useGridDimensions() {\n  const gridRef = useRef(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [isWidthInitialized, setWidthInitialized] = useState(false);\n  useLayoutEffect(() => {\n    const {\n      ResizeObserver\n    } = window;\n    if (ResizeObserver == null) return;\n    const {\n      clientWidth,\n      clientHeight,\n      offsetWidth,\n      offsetHeight\n    } = gridRef.current;\n    const {\n      width,\n      height\n    } = gridRef.current.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n    setInlineSize(handleDevicePixelRatio(initialWidth));\n    setBlockSize(initialHeight);\n    const resizeObserver = new ResizeObserver(entries => {\n      const size = entries[0].contentBoxSize[0];\n      setInlineSize(handleDevicePixelRatio(size.inlineSize));\n      setBlockSize(size.blockSize);\n      setWidthInitialized(true);\n    });\n    resizeObserver.observe(gridRef.current);\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n  return [gridRef, inlineSize, blockSize, isWidthInitialized];\n}\n\nfunction handleDevicePixelRatio(size) {\n  return size - (devicePixelRatio === 1 ? 0 : ceil(devicePixelRatio));\n}\n\nfunction useLatestFunc(fn) {\n  const ref = useRef(fn);\n  useEffect(() => {\n    ref.current = fn;\n  });\n  const callbackFn = useCallback(function () {\n    ref.current(...arguments);\n  }, []);\n  return fn ? callbackFn : fn;\n}\n\nfunction useRovingCellRef(isSelected) {\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  const ref = useCallback(cell => {\n    if (cell === null) return;\n    scrollIntoView(cell);\n    if (cell.contains(document.activeElement)) return;\n    cell.focus({\n      preventScroll: true\n    });\n  }, []);\n\n  function onFocus(event) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused;\n  return {\n    ref: isSelected ? ref : undefined,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n\nfunction useViewportColumns(_ref16) {\n  let {\n    columns,\n    colSpanColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    columnWidths,\n    isGroupRow\n  } = _ref16;\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx, colSpan) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n        type: 'HEADER'\n      }))) {\n        break;\n      }\n\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n\n        if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n          type: 'ROW',\n          row\n        }))) {\n          break;\n        }\n      }\n\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n            type: 'SUMMARY',\n            row\n          }))) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n            type: 'SUMMARY',\n            row\n          }))) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [rowOverscanStartIdx, rowOverscanEndIdx, rows, topSummaryRows, bottomSummaryRows, colOverscanStartIdx, lastFrozenColumnIndex, colSpanColumns, isGroupRow]);\n  const {\n    viewportColumns,\n    flexWidthViewportColumns\n  } = useMemo(() => {\n    const viewportColumns = [];\n    const flexWidthViewportColumns = [];\n\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n\n      if (typeof column.width === 'string') {\n        flexWidthViewportColumns.push(column);\n      }\n    }\n\n    return {\n      viewportColumns,\n      flexWidthViewportColumns\n    };\n  }, [startIdx, colOverscanEndIdx, columns]);\n  const unsizedFlexWidthViewportColumns = useMemo(() => {\n    return flexWidthViewportColumns.filter(column => !columnWidths.has(column.key));\n  }, [flexWidthViewportColumns, columnWidths]);\n  return {\n    viewportColumns,\n    flexWidthViewportColumns: unsizedFlexWidthViewportColumns\n  };\n}\n\nfunction isReadonlyArray(arr) {\n  return Array.isArray(arr);\n}\n\nfunction useViewportRows(_ref17) {\n  let {\n    rawRows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    groupBy,\n    rowGrouper,\n    expandedGroupIds,\n    enableVirtualization\n  } = _ref17;\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (rows, _ref18, startRowIndex) => {\n      let [groupByKey, ...remainingGroupByKeys] = _ref18;\n      let groupRowsCount = 0;\n      const groups = {};\n\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0 ? [childRows, childRows.length] : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1);\n        groups[key] = {\n          childRows,\n          childGroups,\n          startRowIndex: startRowIndex + groupRowsCount\n        };\n        groupRowsCount += childRowsCount + 1;\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n  const [rows, isGroupRow] = useMemo(() => {\n    const allGroupRows = new Set();\n    if (!groupedRows) return [rawRows, isGroupRow];\n    const flattenedRows = [];\n\n    const expandGroup = (rows, parentId, level) => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const {\n          childRows,\n          childGroups,\n          startRowIndex\n        } = rows[groupKey];\n        const groupRow = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row) {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n  const {\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: rowIdx => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: offset => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    const rowPositions = rows.map(row => {\n      const currentRowHeight = isGroupRow(row) ? rowHeight({\n        type: 'GROUP',\n        row\n      }) : rowHeight({\n        type: 'ROW',\n        row\n      });\n      const position = {\n        top: totalRowHeight,\n        height: currentRowHeight\n      };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = rowIdx => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: rowIdx => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: rowIdx => rowPositions[validateRowIdx(rowIdx)].height,\n\n      findRowIdx(offset) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n\n        return 0;\n      }\n\n    };\n  }, [isGroupRow, rowHeight, rows]);\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n\nconst headerSortCell = \"h1e8ezgp7-0-0-beta-18\";\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\nconst headerSortName = \"h1rrblhe7-0-0-beta-18\";\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nfunction headerRenderer(_ref19) {\n  let {\n    column,\n    sortDirection,\n    priority,\n    onSort,\n    isCellSelected\n  } = _ref19;\n  if (!column.sortable) return /*#__PURE__*/jsx(Fragment, {\n    children: column.name\n  });\n  return /*#__PURE__*/jsx(SortableHeaderCell, {\n    onSort: onSort,\n    sortDirection: sortDirection,\n    priority: priority,\n    isCellSelected: isCellSelected,\n    children: column.name\n  });\n}\n\nfunction SortableHeaderCell(_ref20) {\n  let {\n    onSort,\n    sortDirection,\n    priority,\n    children,\n    isCellSelected\n  } = _ref20;\n  const sortStatus = useDefaultComponents().sortStatus;\n  const {\n    ref,\n    tabIndex\n  } = useFocusRef(isCellSelected);\n\n  function handleKeyDown(event) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return /*#__PURE__*/jsxs(\"span\", {\n    ref: ref,\n    tabIndex: tabIndex,\n    className: headerSortCellClassname,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown,\n    children: [/*#__PURE__*/jsx(\"span\", {\n      className: headerSortNameClassname,\n      children: children\n    }), /*#__PURE__*/jsx(\"span\", {\n      children: sortStatus({\n        sortDirection,\n        priority\n      })\n    })]\n  });\n}\n\nconst cellResizable = \"celq7o97-0-0-beta-18\";\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nfunction HeaderCell(_ref21) {\n  let {\n    column,\n    colSpan,\n    isCellSelected,\n    onColumnResize,\n    allRowsSelected,\n    onAllRowsSelectionChange,\n    sortColumns,\n    onSortColumnsChange,\n    selectCell,\n    shouldFocusGrid,\n    direction\n  } = _ref21;\n  const isRtl = direction === 'rtl';\n  const {\n    ref,\n    tabIndex,\n    onFocus\n  } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex(sort => sort.columnKey === column.key);\n  const sortColumn = sortIndex !== undefined && sortIndex > -1 ? sortColumns[sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns.length > 1 ? sortIndex + 1 : undefined;\n  const ariaSort = sortDirection && !priority ? sortDirection === 'ASC' ? 'ascending' : 'descending' : undefined;\n  const className = getCellClassname(column, column.headerCellClass, column.resizable && cellResizableClassname);\n  const headerRenderer$1 = column.headerRenderer ?? headerRenderer;\n\n  function onPointerDown(event) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const {\n      currentTarget,\n      pointerId\n    } = event;\n    const {\n      right,\n      left\n    } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      return;\n    }\n\n    function onPointerMove(event) {\n      event.preventDefault();\n      const {\n        right,\n        left\n      } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick) {\n    if (onSortColumnsChange == null) return;\n    const {\n      sortDescendingFirst\n    } = column;\n\n    if (sortColumn === undefined) {\n      const nextSort = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn;\n\n      if (sortDescendingFirst && sortDirection === 'DESC' || !sortDescendingFirst && sortDirection === 'ASC') {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns];\n\n        if (nextSortColumn) {\n          nextSortColumns[sortIndex] = nextSortColumn;\n        } else {\n          nextSortColumns.splice(sortIndex, 1);\n        }\n\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event) {\n    const {\n      right,\n      left\n    } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      return;\n    }\n\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event) {\n    onFocus?.(event);\n\n    if (shouldFocusGrid) {\n      selectCell(0);\n    }\n  }\n\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"columnheader\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    \"aria-sort\": ariaSort,\n    \"aria-colspan\": colSpan,\n    ref: ref,\n    tabIndex: shouldFocusGrid ? 0 : tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onFocus: handleFocus,\n    onClick: onClick,\n    onDoubleClick: column.resizable ? onDoubleClick : undefined,\n    onPointerDown: column.resizable ? onPointerDown : undefined,\n    children: headerRenderer$1({\n      column,\n      sortDirection,\n      priority,\n      onSort,\n      allRowsSelected,\n      onAllRowsSelectionChange,\n      isCellSelected\n    })\n  });\n}\n\nconst headerRow = \"h197vzie7-0-0-beta-18\";\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow(_ref22) {\n  let {\n    columns,\n    allRowsSelected,\n    onAllRowsSelectionChange,\n    onColumnResize,\n    sortColumns,\n    onSortColumnsChange,\n    lastFrozenColumnIndex,\n    selectedCellIdx,\n    selectCell,\n    shouldFocusGrid,\n    direction\n  } = _ref22;\n  const cells = [];\n\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'HEADER'\n    });\n\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push( /*#__PURE__*/jsx(HeaderCell, {\n      column: column,\n      colSpan: colSpan,\n      isCellSelected: selectedCellIdx === column.idx,\n      onColumnResize: onColumnResize,\n      allRowsSelected: allRowsSelected,\n      onAllRowsSelectionChange: onAllRowsSelectionChange,\n      onSortColumnsChange: onSortColumnsChange,\n      sortColumns: sortColumns,\n      selectCell: selectCell,\n      shouldFocusGrid: shouldFocusGrid && index === 0,\n      direction: direction\n    }, column.key));\n  }\n\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": 1,\n    className: clsx(headerRowClassname, selectedCellIdx === -1 && rowSelectedClassname),\n    style: getRowStyle(1),\n    children: cells\n  });\n}\n\nconst HeaderRow$1 = /*#__PURE__*/memo(HeaderRow);\nconst cellCopied = \"ccpfvsn7-0-0-beta-18\";\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\nconst cellDraggedOver = \"c1bmg16t7-0-0-beta-18\";\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell(_ref23) {\n  let {\n    column,\n    colSpan,\n    isCellSelected,\n    isCopied,\n    isDraggedOver,\n    row,\n    dragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    onRowChange,\n    selectCell,\n    ...props\n  } = _ref23;\n  const {\n    ref,\n    tabIndex,\n    onFocus\n  } = useRovingCellRef(isCellSelected);\n  const {\n    cellClass\n  } = column;\n  const className = getCellClassname(column, typeof cellClass === 'function' ? cellClass(row) : cellClass, isCopied && cellCopiedClassname, isDraggedOver && cellDraggedOverClassname);\n\n  function selectCellWrapper(openEditor) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  function handleRowChange(newRow) {\n    onRowChange(column, newRow);\n  }\n\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    \"aria-colspan\": colSpan,\n    \"aria-readonly\": !isCellEditable(column, row) || undefined,\n    ref: ref,\n    tabIndex: tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onClick: handleClick,\n    onDoubleClick: handleDoubleClick,\n    onContextMenu: handleContextMenu,\n    onFocus: onFocus,\n    ...props,\n    children: !column.rowGroup && /*#__PURE__*/jsxs(Fragment, {\n      children: [column.formatter({\n        column,\n        row,\n        isCellSelected,\n        onRowChange: handleRowChange\n      }), dragHandle]\n    })\n  });\n}\n\nconst Cell$1 = /*#__PURE__*/memo(Cell);\n\nfunction Row(_ref24, ref) {\n  let {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  } = _ref24;\n  const handleRowChange = useLatestFunc((column, newRow) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, rowClass?.(row), className, selectedCellIdx === -1 && rowSelectedClassname);\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const {\n      idx\n    } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push( /*#__PURE__*/jsx(Cell$1, {\n        column: column,\n        colSpan: colSpan,\n        row: row,\n        isCopied: copiedCellIdx === idx,\n        isDraggedOver: draggedOverCellIdx === idx,\n        isCellSelected: isCellSelected,\n        dragHandle: isCellSelected ? selectedCellDragHandle : undefined,\n        onRowClick: onRowClick,\n        onRowDoubleClick: onRowDoubleClick,\n        onRowChange: handleRowChange,\n        selectCell: selectCell\n      }, column.key));\n    }\n  }\n\n  return /*#__PURE__*/jsx(RowSelectionProvider, {\n    value: isRowSelected,\n    children: /*#__PURE__*/jsx(\"div\", {\n      role: \"row\",\n      ref: ref,\n      className: className,\n      onMouseEnter: handleDragEnter,\n      style: getRowStyle(gridRowStart, height),\n      ...props,\n      children: cells\n    })\n  });\n}\n\nconst RowComponent = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Row));\nconst RowComponent$1 = RowComponent;\n\nfunction defaultRowRenderer(key, props) {\n  return /*#__PURE__*/jsx(RowComponent, { ...props\n  }, key);\n}\n\nfunction GroupCell(_ref25) {\n  let {\n    id,\n    groupKey,\n    childRows,\n    isExpanded,\n    isCellSelected,\n    column,\n    row,\n    groupColumnIndex,\n    toggleGroup: toggleGroupWrapper\n  } = _ref25;\n  const {\n    ref,\n    tabIndex,\n    onFocus\n  } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    ref: ref,\n    tabIndex: tabIndex,\n    className: getCellClassname(column),\n    style: { ...getCellStyle(column),\n      cursor: isLevelMatching ? 'pointer' : 'default'\n    },\n    onClick: isLevelMatching ? toggleGroup : undefined,\n    onFocus: onFocus,\n    children: (!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter?.({\n      groupKey,\n      childRows,\n      column,\n      row,\n      isExpanded,\n      isCellSelected,\n      toggleGroup\n    })\n  }, column.key);\n}\n\nconst GroupCell$1 = /*#__PURE__*/memo(GroupCell);\nconst groupRow = \"gyxx7e97-0-0-beta-18\";\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow(_ref26) {\n  let {\n    id,\n    groupKey,\n    viewportColumns,\n    childRows,\n    rowIdx,\n    row,\n    gridRowStart,\n    height,\n    level,\n    isExpanded,\n    selectedCellIdx,\n    isRowSelected,\n    selectGroup,\n    toggleGroup,\n    ...props\n  } = _ref26;\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return /*#__PURE__*/jsx(RowSelectionProvider, {\n    value: isRowSelected,\n    children: /*#__PURE__*/jsx(\"div\", {\n      role: \"row\",\n      \"aria-level\": level,\n      \"aria-expanded\": isExpanded,\n      className: clsx(rowClassname, groupRowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, selectedCellIdx === -1 && rowSelectedClassname),\n      onClick: handleSelectGroup,\n      style: getRowStyle(gridRowStart, height),\n      ...props,\n      children: viewportColumns.map(column => /*#__PURE__*/jsx(GroupCell$1, {\n        id: id,\n        groupKey: groupKey,\n        childRows: childRows,\n        isExpanded: isExpanded,\n        isCellSelected: selectedCellIdx === column.idx,\n        column: column,\n        row: row,\n        groupColumnIndex: idx,\n        toggleGroup: toggleGroup\n      }, column.key))\n    })\n  });\n}\n\nconst GroupRowRenderer = /*#__PURE__*/memo(GroupedRow);\nconst summaryCellClassname = \"s1n3hxke7-0-0-beta-18\";\n\nfunction SummaryCell(_ref27) {\n  let {\n    column,\n    colSpan,\n    row,\n    isCellSelected,\n    selectCell\n  } = _ref27;\n  const {\n    ref,\n    tabIndex,\n    onFocus\n  } = useRovingCellRef(isCellSelected);\n  const {\n    summaryCellClass\n  } = column;\n  const className = getCellClassname(column, summaryCellClassname, typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass);\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": isCellSelected,\n    ref: ref,\n    tabIndex: tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onClick: onClick,\n    onFocus: onFocus,\n    children: column.summaryFormatter?.({\n      column,\n      row,\n      isCellSelected\n    })\n  });\n}\n\nconst SummaryCell$1 = /*#__PURE__*/memo(SummaryCell);\nconst summaryRow = \"snfqesz7-0-0-beta-18\";\nconst topSummaryRow = \"t1jijrjz7-0-0-beta-18\";\nconst topSummaryRowBorderClassname = \"t14bmecc7-0-0-beta-18\";\nconst bottomSummaryRowBorderClassname = \"b1odhhml7-0-0-beta-18\";\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow(_ref28) {\n  let {\n    rowIdx,\n    gridRowStart,\n    row,\n    viewportColumns,\n    top,\n    bottom,\n    lastFrozenColumnIndex,\n    selectedCellIdx,\n    lastTopRowIdx,\n    selectCell,\n    'aria-rowindex': ariaRowIndex\n  } = _ref28;\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row\n    });\n\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n    cells.push( /*#__PURE__*/jsx(SummaryCell$1, {\n      column: column,\n      colSpan: colSpan,\n      row: row,\n      isCellSelected: isCellSelected,\n      selectCell: selectCell\n    }, column.key));\n  }\n\n  const isTop = lastTopRowIdx !== undefined;\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": ariaRowIndex,\n    className: clsx(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, summaryRowClassname, isTop ? [topSummaryRowClassname, lastTopRowIdx === rowIdx && topSummaryRowBorderClassname] : ['rdg-bottom-summary-row', rowIdx === 0 && bottomSummaryRowBorderClassname], selectedCellIdx === -1 && rowSelectedClassname),\n    style: { ...getRowStyle(gridRowStart),\n      '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n      '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n    },\n    children: cells\n  });\n}\n\nconst SummaryRow$1 = /*#__PURE__*/memo(SummaryRow);\nconst cellEditing = \"c1tngyp17-0-0-beta-18\";\n\nfunction EditCell(_ref29) {\n  let {\n    column,\n    colSpan,\n    row,\n    onRowChange,\n    closeEditor\n  } = _ref29;\n  const frameRequestRef = useRef();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true);\n  });\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, {\n      capture: true\n    });\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, {\n        capture: true\n      });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current);\n  }\n\n  function onKeyDown(event) {\n    if (event.key === 'Escape') {\n      event.stopPropagation();\n      onClose();\n    } else if (event.key === 'Enter') {\n      event.stopPropagation();\n      onClose(true);\n    } else {\n      const onNavigation = column.editorOptions?.onNavigation ?? onEditorNavigation;\n\n      if (!onNavigation(event)) {\n        event.stopPropagation();\n      }\n    }\n  }\n\n  function onClose(commitChanges) {\n    if (commitChanges) {\n      onRowChange(row, true);\n    } else {\n      closeEditor();\n    }\n  }\n\n  const {\n    cellClass\n  } = column;\n  const className = getCellClassname(column, 'rdg-editor-container', typeof cellClass === 'function' ? cellClass(row) : cellClass, !column.editorOptions?.renderFormatter && cellEditing);\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": true,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onKeyDown: onKeyDown,\n    onMouseDownCapture: commitOnOutsideClick ? cancelFrameRequest : undefined,\n    children: column.editor != null && /*#__PURE__*/jsxs(Fragment, {\n      children: [column.editor({\n        column,\n        row,\n        onRowChange,\n        onClose\n      }), column.editorOptions?.renderFormatter && column.formatter({\n        column,\n        row,\n        isCellSelected: true,\n        onRowChange\n      })]\n    })\n  });\n}\n\nconst cellDragHandle = \"cadd3bp7-0-0-beta-18\";\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\nfunction DragHandle(_ref30) {\n  let {\n    rows,\n    columns,\n    selectedPosition,\n    latestDraggedOverRowIdx,\n    isCellEditable,\n    onRowsChange,\n    onFill,\n    setDragging,\n    setDraggedOverRowIdx\n  } = _ref30;\n\n  function handleMouseDown(event) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event) {\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n    const {\n      rowIdx\n    } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx, endRowIdx) {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes = [];\n\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({\n        rowIdx: i,\n        idx\n      })) {\n        const updatedRow = onFill({\n          columnKey: column.key,\n          sourceRow,\n          targetRow: rows[i]\n        });\n\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, {\n        indexes,\n        column\n      });\n    }\n  }\n\n  return /*#__PURE__*/jsx(\"div\", {\n    className: cellDragHandleClassname,\n    onMouseDown: handleMouseDown,\n    onDoubleClick: handleDoubleClick\n  });\n}\n\nconst arrow = \"a1mygwml7-0-0-beta-18\";\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nfunction sortStatus(_ref31) {\n  let {\n    sortDirection,\n    priority\n  } = _ref31;\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [sortIcon({\n      sortDirection\n    }), sortPriority({\n      priority\n    })]\n  });\n}\n\nfunction sortIcon(_ref32) {\n  let {\n    sortDirection\n  } = _ref32;\n  if (sortDirection === undefined) return null;\n  return /*#__PURE__*/jsx(\"svg\", {\n    viewBox: \"0 0 12 8\",\n    width: \"12\",\n    height: \"8\",\n    className: arrowClassname,\n    \"aria-hidden\": true,\n    children: /*#__PURE__*/jsx(\"path\", {\n      d: sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'\n    })\n  });\n}\n\nfunction sortPriority(_ref33) {\n  let {\n    priority\n  } = _ref33;\n  return priority;\n}\n\nconst initialPosition = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nfunction DataGrid(_ref34, ref) {\n  let {\n    columns: rawColumns,\n    rows: rawRows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  } = _ref34;\n  const defaultComponents = useDefaultComponents();\n  rowHeight ?? (rowHeight = 35);\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const rowRenderer = renderers?.rowRenderer ?? defaultComponents?.rowRenderer ?? defaultRowRenderer;\n  const sortStatus$1 = renderers?.sortStatus ?? defaultComponents?.sortStatus ?? sortStatus;\n  const checkboxFormatter$1 = renderers?.checkboxFormatter ?? defaultComponents?.checkboxFormatter ?? checkboxFormatter;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultComponents?.noRowsFallback;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ?? (enableVirtualization = true);\n  direction ?? (direction = 'ltr');\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState(initialPosition);\n  const [copiedCell, setCopiedCell] = useState(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState(undefined);\n  const [autoResizeColumn, setAutoResizeColumn] = useState(null);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef(null);\n  const [gridRef, gridWidth, gridHeight, isWidthInitialized] = useGridDimensions();\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const defaultGridComponents = useMemo(() => ({\n    sortStatus: sortStatus$1,\n    checkboxFormatter: checkboxFormatter$1\n  }), [sortStatus$1, checkboxFormatter$1]);\n  const allRowsSelected = useMemo(() => {\n    const {\n      length\n    } = rawRows;\n    return length !== 0 && selectedRows != null && rowKeyGetter != null && selectedRows.size >= length && rawRows.every(row => selectedRows.has(rowKeyGetter(row)));\n  }, [rawRows, selectedRows, rowKeyGetter]);\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n  const {\n    viewportColumns,\n    flexWidthViewportColumns\n  } = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    columnWidths,\n    isGroupRow\n  });\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onRowClickLatest = useLatestFunc(onRowClick);\n  const onRowDoubleClickLatest = useLatestFunc(onRowDoubleClick);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc((row, column, enableEditor) => {\n    const rowIdx = rows.indexOf(row);\n    selectCell({\n      rowIdx,\n      idx: column.idx\n    }, enableEditor);\n  });\n  const selectGroupLatest = useLatestFunc(rowIdx => {\n    selectCell({\n      rowIdx,\n      idx: -1\n    });\n  });\n  const selectHeaderCellLatest = useLatestFunc(idx => {\n    selectCell({\n      rowIdx: minRowIdx,\n      idx\n    });\n  });\n  const selectTopSummaryCellLatest = useLatestFunc((summaryRow, column) => {\n    const rowIdx = topSummaryRows.indexOf(summaryRow);\n    selectCell({\n      rowIdx: rowIdx + minRowIdx + 1,\n      idx: column.idx\n    });\n  });\n  const selectBottomSummaryCellLatest = useLatestFunc((summaryRow, column) => {\n    const rowIdx = bottomSummaryRows.indexOf(summaryRow) + rows.length;\n    selectCell({\n      rowIdx,\n      idx: column.idx\n    });\n  });\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n  useLayoutEffect(() => {\n    if (!selectedCellIsWithinSelectionBounds || isSamePosition(selectedPosition, prevSelectedPosition.current)) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current.focus({\n        preventScroll: true\n      });\n      scrollIntoView(rowRef.current);\n    }\n  });\n  useLayoutEffect(() => {\n    if (!isWidthInitialized || flexWidthViewportColumns.length === 0) return;\n    setColumnWidths(columnWidths => {\n      const newColumnWidths = new Map(columnWidths);\n      const grid = gridRef.current;\n\n      for (const column of flexWidthViewportColumns) {\n        const measuringCell = grid.querySelector(`[data-measuring-cell-key=\"${column.key}\"]`);\n        const {\n          width\n        } = measuringCell.getBoundingClientRect();\n        newColumnWidths.set(column.key, width);\n      }\n\n      return newColumnWidths;\n    });\n  }, [isWidthInitialized, flexWidthViewportColumns, gridRef]);\n  useLayoutEffect(() => {\n    if (autoResizeColumn === null) return;\n    const measuringCell = gridRef.current.querySelector(`[data-measuring-cell-key=\"${autoResizeColumn.key}\"]`);\n    const {\n      width\n    } = measuringCell.getBoundingClientRect();\n    setColumnWidths(columnWidths => {\n      const newColumnWidths = new Map(columnWidths);\n      newColumnWidths.set(autoResizeColumn.key, width);\n      return newColumnWidths;\n    });\n    setAutoResizeColumn(null);\n    onColumnResize?.(autoResizeColumn.idx, width);\n  }, [autoResizeColumn, gridRef, onColumnResize]);\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn,\n\n    scrollToRow(rowIdx) {\n      const {\n        current\n      } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n\n    selectCell\n  }));\n  const handleColumnResize = useCallback((column, width) => {\n    if (width === 'max-content') {\n      setAutoResizeColumn(column);\n      return;\n    }\n\n    setColumnWidths(columnWidths => {\n      const newColumnWidths = new Map(columnWidths);\n      newColumnWidths.set(column.key, width);\n      return newColumnWidths;\n    });\n    onColumnResize?.(column.idx, width);\n  }, [onColumnResize]);\n  const setDraggedOverRowIdx = useCallback(rowIdx => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  function selectRow(_ref35) {\n    let {\n      row,\n      checked,\n      isShiftClick\n    } = _ref35;\n    if (!onSelectedRowsChange) return;\n    assertIsValidKeyGetter(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked) {\n    if (!onSelectedRowsChange) return;\n    assertIsValidKeyGetter(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n    const {\n      key,\n      keyCode\n    } = event;\n    const {\n      rowIdx\n    } = selectedPosition;\n\n    if (selectedCellIsWithinViewportBounds && (onPaste != null || onCopy != null) && isCtrlKeyHeldDown(event) && !isGroupRow(rows[rowIdx]) && selectedPosition.mode === 'SELECT') {\n      const cKey = 67;\n      const vKey = 86;\n\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (isGroupRow(row) && selectedPosition.idx === -1 && (key === leftKey && row.isExpanded || key === rightKey && !row.isExpanded)) {\n        event.preventDefault();\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event) {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx]) : rowIdx;\n  }\n\n  function updateRow(column, rowIdx, row) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({\n      row: sourceRow,\n      columnKey: sourceColumnKey\n    });\n    onCopy?.({\n      sourceRow,\n      sourceColumnKey\n    });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const {\n      key,\n      shiftKey\n    } = event;\n\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({\n        row,\n        checked: !selectedRows.has(rowKey),\n        isShiftClick: false\n      });\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(_ref36 => {\n        let {\n          idx,\n          rowIdx\n        } = _ref36;\n        return {\n          idx,\n          rowIdx,\n          mode: 'EDIT',\n          row,\n          originalRow: row\n        };\n      });\n    }\n  }\n\n  function isColIdxWithinSelectionBounds(idx) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds(_ref37) {\n    let {\n      idx,\n      rowIdx\n    } = _ref37;\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds(_ref38) {\n    let {\n      idx,\n      rowIdx\n    } = _ref38;\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position) {\n    return isCellWithinViewportBounds(position) && isSelectedCellEditable({\n      columns,\n      rows,\n      selectedPosition: position,\n      isGroupRow\n    });\n  }\n\n  function selectCell(position, enableEditor) {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx];\n      setSelectedPosition({ ...position,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      });\n    } else if (isSamePosition(selectedPosition, position)) {\n      scrollIntoView(gridRef.current?.querySelector('[tabindex=\"0\"]'));\n    } else {\n      setSelectedPosition({ ...position,\n        mode: 'SELECT'\n      });\n    }\n  }\n\n  function scrollToColumn(idx) {\n    const {\n      current\n    } = gridRef;\n    if (!current) return;\n\n    if (idx > lastFrozenColumnIndex) {\n      const {\n        rowIdx\n      } = selectedPosition;\n      if (!isCellWithinSelectionBounds({\n        rowIdx,\n        idx\n      })) return;\n      const {\n        clientWidth\n      } = current;\n      const column = columns[idx];\n      const {\n        left,\n        width\n      } = columnMetrics.get(column);\n      let right = left + width;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const {\n          left,\n          width\n        } = columnMetrics.get(columns[column.idx + colSpan - 1]);\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      const sign = isRtl ? -1 : 1;\n\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = (left - totalFrozenColumnWidth) * sign;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = (right - clientWidth) * sign;\n      }\n    }\n  }\n\n  function getNextPosition(key, ctrlKey, shiftKey) {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n\n      if (parentRowIdx !== -1) {\n        return {\n          idx,\n          rowIdx: parentRowIdx\n        };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return {\n          idx,\n          rowIdx: rowIdx - 1\n        };\n\n      case 'ArrowDown':\n        return {\n          idx,\n          rowIdx: rowIdx + 1\n        };\n\n      case leftKey:\n        return {\n          idx: idx - 1,\n          rowIdx\n        };\n\n      case rightKey:\n        return {\n          idx: idx + 1,\n          rowIdx\n        };\n\n      case 'Tab':\n        return {\n          idx: idx + (shiftKey ? -1 : 1),\n          rowIdx\n        };\n\n      case 'Home':\n        if (isRowSelected) return {\n          idx,\n          rowIdx: 0\n        };\n        return {\n          idx: 0,\n          rowIdx: ctrlKey ? minRowIdx : rowIdx\n        };\n\n      case 'End':\n        if (isRowSelected) return {\n          idx,\n          rowIdx: rows.length - 1\n        };\n        return {\n          idx: maxColIdx,\n          rowIdx: ctrlKey ? maxRowIdx : rowIdx\n        };\n\n      case 'PageUp':\n        {\n          if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n          const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n          return {\n            idx,\n            rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0\n          };\n        }\n\n      case 'PageDown':\n        {\n          if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n          const nextRowY = getRowTop(rowIdx) + clientHeight;\n          return {\n            idx,\n            rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1\n          };\n        }\n\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event) {\n    const {\n      key,\n      shiftKey\n    } = event;\n    let mode = cellNavigationMode;\n\n    if (key === 'Tab') {\n      if (canExitGrid({\n        shiftKey,\n        cellNavigationMode,\n        maxColIdx,\n        minRowIdx,\n        maxRowIdx,\n        selectedPosition\n      })) {\n        commitEditorChanges();\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    event.preventDefault();\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx) {\n    if (draggedOverRowIdx === undefined) return;\n    const {\n      rowIdx\n    } = selectedPosition;\n    const isDraggedOver = rowIdx < draggedOverRowIdx ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getLayoutCssVars() {\n    if (autoResizeColumn === null && flexWidthViewportColumns.length === 0) return layoutCssVars;\n    const {\n      gridTemplateColumns\n    } = layoutCssVars;\n    const newSizes = gridTemplateColumns.split(' ');\n\n    if (autoResizeColumn !== null) {\n      newSizes[autoResizeColumn.idx] = 'max-content';\n    }\n\n    for (const column of flexWidthViewportColumns) {\n      newSizes[column.idx] = column.width;\n    }\n\n    return { ...layoutCssVars,\n      gridTemplateColumns: newSizes.join(' ')\n    };\n  }\n\n  function getDragHandle(rowIdx) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'EDIT' || hasGroups || onFill == null) {\n      return;\n    }\n\n    return /*#__PURE__*/jsx(DragHandle, {\n      rows: rawRows,\n      columns: columns,\n      selectedPosition: selectedPosition,\n      isCellEditable: isCellEditable,\n      latestDraggedOverRowIdx: latestDraggedOverRowIdx,\n      onRowsChange: onRowsChange,\n      onFill: onFill,\n      setDragging: setDragging,\n      setDraggedOverRowIdx: setDraggedOverRowIdx\n    });\n  }\n\n  function getCellEditor(rowIdx) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n    const {\n      idx,\n      row\n    } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n\n    const closeEditor = () => {\n      setSelectedPosition(_ref39 => {\n        let {\n          idx,\n          rowIdx\n        } = _ref39;\n        return {\n          idx,\n          rowIdx,\n          mode: 'SELECT'\n        };\n      });\n    };\n\n    const onRowChange = (row, commitChanges) => {\n      if (commitChanges) {\n        updateRow(column, selectedPosition.rowIdx, row);\n        closeEditor();\n      } else {\n        setSelectedPosition(position => ({ ...position,\n          row\n        }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      closeEditor();\n    }\n\n    return /*#__PURE__*/jsx(EditCell, {\n      column: column,\n      colSpan: colSpan,\n      row: row,\n      onRowChange: onRowChange,\n      closeEditor: closeEditor\n    }, column.key);\n  }\n\n  function getRowViewportColumns(rowIdx) {\n    const selectedColumn = columns[selectedPosition.idx];\n\n    if (selectedColumn !== undefined && selectedPosition.rowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n      return selectedPosition.idx > colOverscanEndIdx ? [...viewportColumns, selectedColumn] : [...viewportColumns.slice(0, lastFrozenColumnIndex + 1), selectedColumn, ...viewportColumns.slice(lastFrozenColumnIndex + 1)];\n    }\n\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n    const {\n      idx: selectedIdx,\n      rowIdx: selectedRowIdx\n    } = selectedPosition;\n    const startRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx ? rowOverscanStartIdx - 1 : rowOverscanStartIdx;\n    const endRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx ? rowOverscanEndIdx + 1 : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport = viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          rowColumns = [selectedColumn];\n        } else {\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerRowsCount + topSummaryRowsCount + rowIdx + 1;\n\n      if (isGroupRow(row)) {\n        ({\n          startRowIndex\n        } = row);\n        const isGroupRowSelected = isSelectable && row.childRows.every(cr => selectedRows.has(rowKeyGetter(cr)));\n        rowElements.push( /*#__PURE__*/jsx(GroupRowRenderer, {\n          \"aria-level\": row.level + 1,\n          \"aria-setsize\": row.setSize,\n          \"aria-posinset\": row.posInSet + 1,\n          \"aria-rowindex\": headerRowsCount + topSummaryRowsCount + startRowIndex + 1,\n          \"aria-selected\": isSelectable ? isGroupRowSelected : undefined,\n          id: row.id,\n          groupKey: row.groupKey,\n          viewportColumns: rowColumns,\n          childRows: row.childRows,\n          rowIdx: rowIdx,\n          row: row,\n          gridRowStart: gridRowStart,\n          height: getRowHeight(rowIdx),\n          level: row.level,\n          isExpanded: row.isExpanded,\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          isRowSelected: isGroupRowSelected,\n          selectGroup: selectGroupLatest,\n          toggleGroup: toggleGroupLatest\n        }, row.id));\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(rowRenderer(key, {\n        'aria-rowindex': headerRowsCount + topSummaryRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1,\n        'aria-selected': isSelectable ? isRowSelected : undefined,\n        rowIdx,\n        row,\n        viewportColumns: rowColumns,\n        isRowSelected,\n        onRowClick: onRowClickLatest,\n        onRowDoubleClick: onRowDoubleClickLatest,\n        rowClass,\n        gridRowStart,\n        height: getRowHeight(rowIdx),\n        copiedCellIdx: copiedCell !== null && copiedCell.row === row ? columns.findIndex(c => c.key === copiedCell.columnKey) : undefined,\n        selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n        draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n        setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n        lastFrozenColumnIndex,\n        onRowChange: handleFormatterRowChangeLatest,\n        selectCell: selectViewportCellLatest,\n        selectedCellDragHandle: getDragHandle(rowIdx),\n        selectedCellEditor: getCellEditor(rowIdx)\n      }));\n    }\n\n    return rowElements;\n  }\n\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== -2;\n  return /*#__PURE__*/jsxs(\"div\", {\n    role: hasGroups ? 'treegrid' : 'grid',\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    \"aria-multiselectable\": isSelectable ? true : undefined,\n    \"aria-colcount\": columns.length,\n    \"aria-rowcount\": headerRowsCount + rowsCount + summaryRowsCount,\n    className: clsx(rootClassname, (autoResizeColumn !== null || flexWidthViewportColumns.length > 0) && autosizeColumnsClassname, className, isDragging && viewportDraggingClassname),\n    style: { ...style,\n      scrollPaddingInlineStart: selectedPosition.idx > lastFrozenColumnIndex ? `${totalFrozenColumnWidth}px` : undefined,\n      scrollPaddingBlock: selectedPosition.rowIdx >= 0 && selectedPosition.rowIdx < rows.length ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${bottomSummaryRowsCount * summaryRowHeight}px` : undefined,\n      gridTemplateRows: templateRows,\n      '--rdg-header-row-height': `${headerRowHeight}px`,\n      '--rdg-summary-row-height': `${summaryRowHeight}px`,\n      '--rdg-sign': isRtl ? -1 : 1,\n      ...getLayoutCssVars()\n    },\n    dir: direction,\n    ref: gridRef,\n    onScroll: handleScroll,\n    onKeyDown: handleKeyDown,\n    \"data-testid\": testId,\n    children: [hasGroups && /*#__PURE__*/jsx(\"div\", {\n      ref: rowRef,\n      tabIndex: isGroupRowFocused ? 0 : -1,\n      className: clsx(focusSinkClassname, isGroupRowFocused && [rowSelected, lastFrozenColumnIndex !== -1 && rowSelectedWithFrozenCell]),\n      style: {\n        gridRowStart: selectedPosition.rowIdx + 2\n      },\n      onKeyDown: handleKeyDown\n    }), /*#__PURE__*/jsxs(DataGridDefaultComponentsProvider, {\n      value: defaultGridComponents,\n      children: [/*#__PURE__*/jsx(HeaderRow$1, {\n        columns: getRowViewportColumns(-1),\n        onColumnResize: handleColumnResize,\n        allRowsSelected: allRowsSelected,\n        onAllRowsSelectionChange: selectAllRowsLatest,\n        sortColumns: sortColumns,\n        onSortColumnsChange: onSortColumnsChangeLatest,\n        lastFrozenColumnIndex: lastFrozenColumnIndex,\n        selectedCellIdx: selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined,\n        selectCell: selectHeaderCellLatest,\n        shouldFocusGrid: !selectedCellIsWithinSelectionBounds,\n        direction: direction\n      }), rows.length === 0 && noRowsFallback ? noRowsFallback : /*#__PURE__*/jsxs(Fragment, {\n        children: [topSummaryRows?.map((row, rowIdx) => {\n          const gridRowStart = headerRowsCount + rowIdx + 1;\n          const summaryRowIdx = rowIdx + minRowIdx + 1;\n          const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n          const top = headerRowHeight + summaryRowHeight * rowIdx;\n          return /*#__PURE__*/jsx(SummaryRow$1, {\n            \"aria-rowindex\": gridRowStart,\n            rowIdx: rowIdx,\n            gridRowStart: gridRowStart,\n            row: row,\n            top: top,\n            bottom: undefined,\n            lastTopRowIdx: topSummaryRowsCount - 1,\n            viewportColumns: getRowViewportColumns(summaryRowIdx),\n            lastFrozenColumnIndex: lastFrozenColumnIndex,\n            selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n            selectCell: selectTopSummaryCellLatest\n          }, rowIdx);\n        }), /*#__PURE__*/jsx(RowSelectionChangeProvider, {\n          value: selectRowLatest,\n          children: getViewportRows()\n        }), bottomSummaryRows?.map((row, rowIdx) => {\n          const gridRowStart = headerRowsCount + topSummaryRowsCount + rows.length + rowIdx + 1;\n          const summaryRowIdx = rows.length + rowIdx;\n          const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n          const top = clientHeight > totalRowHeight ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx) : undefined;\n          const bottom = top === undefined ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx) : undefined;\n          return /*#__PURE__*/jsx(SummaryRow$1, {\n            \"aria-rowindex\": headerRowsCount + topSummaryRowsCount + rowsCount + rowIdx + 1,\n            rowIdx: rowIdx,\n            gridRowStart: gridRowStart,\n            row: row,\n            top: top,\n            bottom: bottom,\n            lastTopRowIdx: undefined,\n            viewportColumns: getRowViewportColumns(summaryRowIdx),\n            lastFrozenColumnIndex: lastFrozenColumnIndex,\n            selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n            selectCell: selectBottomSummaryCellLatest\n          }, rowIdx);\n        })]\n      }), renderMeasuringCells({\n        viewportColumns\n      })]\n    })]\n  });\n}\n\nfunction isSamePosition(p1, p2) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nconst DataGrid$1 = /*#__PURE__*/forwardRef(DataGrid);\nconst textEditorInternalClassname = \"tlmcuo07-0-0-beta-18\";\nconst textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input) {\n  input?.focus();\n  input?.select();\n}\n\nfunction textEditor(_ref40) {\n  let {\n    row,\n    column,\n    onRowChange,\n    onClose\n  } = _ref40;\n  return /*#__PURE__*/jsx(\"input\", {\n    className: textEditorClassname,\n    ref: autoFocusAndSelect,\n    value: row[column.key],\n    onChange: event => onRowChange({ ...row,\n      [column.key]: event.target.value\n    }),\n    onBlur: () => onClose(true)\n  });\n}\n\nexport { DataGridDefaultComponentsProvider, RowComponent$1 as Row, SELECT_COLUMN_KEY, SelectCellFormatter, SelectColumn, ToggleGroup, checkboxFormatter, DataGrid$1 as default, headerRenderer, sortIcon, sortPriority, textEditor, toggleGroupFormatter, useFocusRef, useRowSelection, valueFormatter };","map":{"version":3,"mappings":"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","names":["cell","cellClassname","autosizeColumnsClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","root","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","row","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","checkboxFormatter","ref","onChange","props","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","className","clsx","disabled","children","type","_jsx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","useRef","current","focus","preventScroll","tabIndex","DataGridDefaultComponentsContext","createContext","undefined","DataGridDefaultComponentsProvider","Provider","useDefaultComponents","useContext","SelectCellFormatter","value","isCellSelected","ariaLabel","ariaLabelledBy","valueFormatter","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","toggleGroupFormatter","ToggleGroup","groupKey","isExpanded","toggleGroup","handleKeyDown","d","onKeyDown","viewBox","width","height","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","Error","SELECT_COLUMN_KEY","SelectFormatter","isRowSelected","onRowSelectionChange","isShiftClick","SelectGroupFormatter","SelectColumn","name","minWidth","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","groupFormatter","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","idx","scrollIntoView","element","inline","block","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","event","has","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","measuringCellClassname","renderMeasuringCells","viewportColumns","map","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","topSummaryRowsCount","length","minRowIdx","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","getRowStyle","getCellStyle","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","isLastFrozenColumn","min","max","round","floor","sign","abs","ceil","Math","assertIsValidKeyGetter","keyGetter","clampColumnWidth","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","rawColumn","includes","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","templateColumns","get","set","columnMetric","gridTemplateColumns","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useGridDimensions","gridRef","inlineSize","setInlineSize","useState","blockSize","setBlockSize","isWidthInitialized","setWidthInitialized","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","getBoundingClientRect","initialWidth","initialHeight","handleDevicePixelRatio","resizeObserver","entries","size","contentBoxSize","observe","disconnect","devicePixelRatio","useLatestFunc","fn","callbackFn","useCallback","useRovingCellRef","isChildFocused","setIsChildFocused","contains","document","activeElement","onFocus","currentTarget","isFocused","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","flexWidthViewportColumns","unsizedFlexWidthViewportColumns","filter","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","startRowIndex","groupByKey","remainingGroupByKeys","groupRowsCount","groups","childRows","Object","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","groupRow","setSize","add","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","sortDirection","priority","onSort","SortableHeaderCell","sortStatus","preventDefault","handleClick","onClick","cellResizable","cellResizableClassname","HeaderCell","onColumnResize","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","isRtl","sortIndex","findIndex","columnKey","sortColumn","ariaSort","headerCellClass","defaultHeaderRenderer","onPointerDown","pointerType","buttons","pointerId","right","clientX","onPointerMove","onLostPointerCapture","removeEventListener","setPointerCapture","addEventListener","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","onDoubleClick","handleFocus","role","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onRowClick","onRowDoubleClick","onRowChange","cellClass","selectCellWrapper","openEditor","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","handleRowChange","newRow","onContextMenu","Row","gridRowStart","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","handleDragEnter","RowComponent","forwardRef","defaultRowRenderer","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","groupRowClassname","GroupedRow","selectGroup","handleSelectGroup","summaryCellClassname","SummaryCell","summaryCellClass","summaryFormatter","summaryRow","topSummaryRow","topSummaryRowBorderClassname","bottomSummaryRowBorderClassname","summaryRowClassname","topSummaryRowClassname","SummaryRow","bottom","lastTopRowIdx","ariaRowIndex","isTop","cellEditing","EditCell","closeEditor","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","stopPropagation","onNavigation","commitChanges","renderFormatter","onMouseDownCapture","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","endRowIndex","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","onMouseDown","arrow","arrowClassname","sortIcon","sortPriority","initialPosition","mode","DataGrid","rowKeyGetter","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onScroll","onCopy","onPaste","rawCellNavigationMode","renderers","ariaDescribedBy","testId","defaultComponents","rowRenderer","defaultSortStatus","defaultCheckboxFormatter","noRowsFallback","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","autoResizeColumn","setAutoResizeColumn","prevSelectedPosition","lastSelectedRowIdx","rowRef","gridWidth","gridHeight","headerRowsCount","bottomSummaryRowsCount","summaryRowsCount","isSelectable","leftKey","rightKey","defaultGridComponents","every","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","onSortColumnsChangeLatest","onRowClickLatest","onRowDoubleClickLatest","selectRowLatest","selectRow","selectAllRowsLatest","selectAllRows","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","selectTopSummaryCellLatest","selectBottomSummaryCellLatest","toggleGroupLatest","isSamePosition","newColumnWidths","grid","measuringCell","querySelector","useImperativeHandle","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newSelectedRows","childRow","rowKey","delete","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","closest","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","isRowIdxWithinViewportBounds","navigate","handleCellInput","handleScroll","flushSync","getRawRowIdx","rawRowIdx","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","targetColumnKey","onCellKeyDown","isDefaultPrevented","originalRow","isColIdxWithinSelectionBounds","isCellAtLeftBoundary","isCellAtRightBoundary","getNextPosition","parentRowIdx","parentRow","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getLayoutCssVars","newSizes","split","join","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","isGroupRowSelected","cr","GroupRowRenderer","c","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","dir","summaryRowIdx","isSummaryRowSelected","p1","p2","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor","onBlur"],"sources":["C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\style\\cell.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\style\\core.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\style\\row.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\formatters\\checkboxFormatter.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\hooks\\useLayoutEffect.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\hooks\\useFocusRef.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\DataGridDefaultComponentsProvider.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\formatters\\SelectCellFormatter.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\formatters\\valueFormatter.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\formatters\\toggleGroupFormatter.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\hooks\\useRowSelection.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\Columns.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\utils\\colSpanUtils.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\utils\\domUtils.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\utils\\keyboardUtils.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\utils\\renderMeasuringCells.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\utils\\selectedCellUtils.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\utils\\styleUtils.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\utils\\index.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\hooks\\useCalculatedColumns.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\hooks\\useGridDimensions.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\hooks\\useLatestFunc.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\hooks\\useRovingCellRef.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\hooks\\useViewportColumns.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\hooks\\useViewportRows.ts","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\headerRenderer.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\HeaderCell.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\HeaderRow.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\Cell.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\Row.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\GroupCell.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\GroupRow.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\SummaryCell.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\SummaryRow.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\EditCell.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\DragHandle.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\sortStatus.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\DataGrid.tsx","C:\\Users\\kmath\\Documents\\Booz\\nachoProblem\\techx-project5\\reactApp\\savewaste\\node_modules\\react-data-grid\\src\\editors\\textEditor.tsx"],"sourcesContent":["import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /*\n    Cannot use these because of a Chromium bug:\n    https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n    once this is fixed we can also remove \"position: relative:\"\n    contain: strict;\n    */\n    position: relative; /* needed for absolute positioning to work */\n    contain: size style;\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\n// max-content does not work when size containment is enabled\n// `contain: content` leads to odd subpixel mismatches when combined with colSpan\nexport const autosizeColumnsClassname = css`\n  @layer rdg.Root {\n    .${cell} {\n      contain: style;\n    }\n  }\n`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  @layer rdg.Cell {\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  }\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg {\n    @layer Defaults,\n      FocusSink,\n      Cell,\n      HeaderCell,\n      SummaryCell,\n      EditCell,\n      Row,\n      HeaderRow,\n      SummaryRow,\n      GroupedRow,\n      Root;\n\n    @layer Defaults {\n      *,\n      *::before,\n      *::after {\n        box-sizing: inherit;\n      }\n    }\n\n    @layer Root {\n      ${lightTheme}\n      --rdg-selection-color: #66afe9;\n      --rdg-font-size: 14px;\n\n      display: grid;\n\n      color-scheme: var(--rdg-color-scheme, light dark);\n\n      /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n      /* We set a stacking context so internal elements don't render on top of external elements. */\n      contain: strict;\n      content-visibility: auto;\n      block-size: 350px;\n      border: 1px solid var(--rdg-border-color);\n      box-sizing: border-box;\n      overflow: auto;\n      background-color: var(--rdg-background-color);\n      color: var(--rdg-color);\n      font-size: var(--rdg-font-size);\n\n      /* needed on Firefox */\n      &::before {\n        content: '';\n        grid-column: 1/-1;\n        grid-row: 1/-1;\n      }\n\n      &.rdg-dark {\n        --rdg-color-scheme: dark;\n        ${darkTheme}\n      }\n\n      &.rdg-light {\n        --rdg-color-scheme: light;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        &:not(.rdg-light) {\n          ${darkTheme}\n        }\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 2 to show up above header row */\n    z-index: 3;\n  }\n`;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected`;\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport type { CheckboxFormatterProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function checkboxFormatter(\n  { onChange, ...props }: CheckboxFormatterProps,\n  ref: React.RefObject<HTMLInputElement>\n) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        ref={ref}\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Renderers, Maybe } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultComponentsContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultComponentsProvider = DataGridDefaultComponentsContext.Provider;\n\nexport function useDefaultComponents<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultComponentsContext);\n}\n","import { useFocusRef } from '../hooks/useFocusRef';\nimport { useDefaultComponents } from '../DataGridDefaultComponentsProvider';\nimport type { CheckboxFormatterProps } from '../types';\n\ntype SharedInputProps = Pick<CheckboxFormatterProps, 'disabled' | 'aria-label' | 'aria-labelledby'>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n  const checkboxFormatter = useDefaultComponents()!.checkboxFormatter!;\n\n  return (\n    <>\n      {checkboxFormatter(\n        {\n          'aria-label': ariaLabel,\n          'aria-labelledby': ariaLabelledBy,\n          tabIndex,\n          disabled,\n          checked: value,\n          onChange\n        },\n        ref\n      )}\n    </>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function valueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function toggleGroupFormatter<R, SR>(props: GroupFormatterProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter(props) {\n    return <SelectFormatter {...props} />;\n  },\n  groupFormatter(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<HTMLDivElement>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>({\n  viewportColumns\n}: {\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n}) {\n  return (\n    <>\n      {viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n        <div\n          key={key}\n          className={measuringCellClassname}\n          style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n          data-measuring-cell-key={key}\n        />\n      ))}\n    </>\n  );\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, round, floor, sign, abs, ceil } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { valueFormatter, toggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { clampColumnWidth, max, min } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 80;\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? valueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= toggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable,\n    rawGroupBy\n  ]);\n\n  const { layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n\n    for (const column of columns) {\n      let width = columnWidths.get(column.key) ?? column.width;\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns += `${width}px `;\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      gridTemplateColumns: templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nimport { ceil } from '../utils';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number,\n  isWidthInitialized: boolean\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [isWidthInitialized, setWidthInitialized] = useState(false);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(handleDevicePixelRatio(initialWidth));\n    setBlockSize(initialHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      setInlineSize(handleDevicePixelRatio(size.inlineSize));\n      setBlockSize(size.blockSize);\n      setWidthInitialized(true);\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, isWidthInitialized];\n}\n\n// TODO: remove once fixed upstream\n// we reduce width by 1px here to avoid layout issues in Chrome\n// https://bugs.chromium.org/p/chromium/issues/detail?id=1206298\nfunction handleDevicePixelRatio(size: number) {\n  return size - (devicePixelRatio === 1 ? 0 : ceil(devicePixelRatio));\n}\n","import { useRef, useEffect, useCallback } from 'react';\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useCallback, useState } from 'react';\nimport { scrollIntoView } from '../utils';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  const ref = useCallback((cell: HTMLDivElement | null) => {\n    if (cell === null) return;\n    scrollIntoView(cell);\n    if (cell.contains(document.activeElement)) return;\n    cell.focus({ preventScroll: true });\n  }, []);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused;\n\n  return {\n    ref: isSelected ? ref : undefined,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  columnWidths: ReadonlyMap<string, number>;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  columnWidths,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  const { viewportColumns, flexWidthViewportColumns } = useMemo((): {\n    viewportColumns: readonly CalculatedColumn<R, SR>[];\n    flexWidthViewportColumns: readonly CalculatedColumn<R, SR>[];\n  } => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    const flexWidthViewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n      if (typeof column.width === 'string') {\n        flexWidthViewportColumns.push(column);\n      }\n    }\n\n    return { viewportColumns, flexWidthViewportColumns };\n  }, [startIdx, colOverscanEndIdx, columns]);\n\n  const unsizedFlexWidthViewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    return flexWidthViewportColumns.filter((column) => !columnWidths.has(column.key));\n  }, [flexWidthViewportColumns, columnWidths]);\n\n  return {\n    viewportColumns,\n    flexWidthViewportColumns: unsizedFlexWidthViewportColumns\n  };\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport { useFocusRef } from './hooks';\nimport type { HeaderRendererProps } from './types';\nimport { useDefaultComponents } from './DataGridDefaultComponentsProvider';\n\nconst headerSortCell = css`\n  @layer rdg.SortableHeaderCell {\n    cursor: pointer;\n    display: flex;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function headerRenderer<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  isCellSelected\n}: HeaderRendererProps<R, SR>) {\n  if (!column.sortable) return <>{column.name}</>;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      isCellSelected={isCellSelected}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: SortableHeaderCellProps<R, SR>) {\n  const sortStatus = useDefaultComponents<R, SR>()!.sortStatus!;\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{sortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultHeaderRenderer from './headerRenderer';\nimport { getCellStyle, getCellClassname, clampColumnWidth } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n\n    &::after {\n      content: '';\n      cursor: col-resize;\n      position: absolute;\n      inset-block-start: 0;\n      inset-inline-end: 0;\n      inset-block-end: 0;\n      inline-size: 10px;\n    }\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const headerRenderer = column.headerRenderer ?? defaultHeaderRenderer;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      // prevents text selection in Chrome, which fixes scrolling the grid while dragging, and fixes re-size on an autosized column\n      event.preventDefault();\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {headerRenderer({\n        column,\n        sortDirection,\n        priority,\n        onSort,\n        allRowsSelected,\n        onAllRowsSelectionChange,\n        isCellSelected\n      })}\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn, Direction } from './types';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { cell, cellFrozen, rowSelectedClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 0 to show up above regular cells */\n      z-index: 1;\n      position: sticky;\n      inset-block-start: 0;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          {column.formatter({\n            column,\n            row,\n            isCellSelected,\n            onRowChange: handleRowChange\n          })}\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRowRenderer<R, SR>(key: React.Key, props: RowRendererProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) &&\n        column.groupFormatter?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          isCellSelected,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.summaryFormatter?.({ column, row, isCellSelected })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport { getColSpan, getRowStyle } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<\n  RowRendererProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  lastTopRowIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 1;\n    }\n\n    > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst topSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-end: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst bottomSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-start: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  lastTopRowIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  const isTop = lastTopRowIdx !== undefined;\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && lastTopRowIdx === rowIdx,\n          [bottomSummaryRowBorderClassname]: !isTop && rowIdx === 0,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation } from './utils';\nimport type { CellRendererProps, EditorProps, Omit } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<EditorProps<R, SR>, 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  closeEditor: () => void;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  closeEditor\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (event.key === 'Escape') {\n      event.stopPropagation();\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      event.stopPropagation();\n      onClose(true);\n    } else {\n      const onNavigation = column.editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) {\n        event.stopPropagation();\n      }\n    }\n  }\n\n  function onClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      onRowChange(row, true);\n    } else {\n      closeEditor();\n    }\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={onKeyDown}\n      onMouseDownCapture={commitOnOutsideClick ? cancelFrameRequest : undefined}\n    >\n      {column.editor != null && (\n        <>\n          {column.editor({\n            column,\n            row,\n            onRowChange,\n            onClose\n          })}\n          {column.editorOptions?.renderFormatter &&\n            column.formatter({ column, row, isCellSelected: true, onRowChange })}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    cursor: move;\n    position: absolute;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 8px;\n    block-size: 8px;\n    background-color: var(--rdg-selection-color);\n\n    &:hover {\n      inline-size: 16px;\n      block-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { css } from '@linaria/core';\nimport type { SortStatusProps, SortIconProps, SortPriorityProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function sortStatus({ sortDirection, priority }: SortStatusProps) {\n  return (\n    <>\n      {sortIcon({ sortDirection })}\n      {sortPriority({ priority })}\n    </>\n  );\n}\n\nexport function sortIcon({ sortDirection }: SortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function sortPriority({ priority }: SortPriorityProps) {\n  return priority;\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  rootClassname,\n  viewportDraggingClassname,\n  focusSinkClassname,\n  autosizeColumnsClassname,\n  rowSelected,\n  rowSelectedWithFrozenCell\n} from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport { defaultRowRenderer } from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport { default as defaultSortStatus } from './sortStatus';\nimport { checkboxFormatter as defaultCheckboxFormatter } from './formatters';\nimport {\n  DataGridDefaultComponentsProvider,\n  useDefaultComponents\n} from './DataGridDefaultComponentsProvider';\nimport {\n  assertIsValidKeyGetter,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  sign,\n  abs,\n  getSelectedCellColSpan,\n  renderMeasuringCells,\n  scrollIntoView\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  CopyEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe,\n  Renderers,\n  Direction\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  const defaultComponents = useDefaultComponents<R, SR>();\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const rowRenderer =\n    renderers?.rowRenderer ?? defaultComponents?.rowRenderer ?? defaultRowRenderer;\n  const sortStatus = renderers?.sortStatus ?? defaultComponents?.sortStatus ?? defaultSortStatus;\n  const checkboxFormatter =\n    renderers?.checkboxFormatter ??\n    defaultComponents?.checkboxFormatter ??\n    defaultCheckboxFormatter;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultComponents?.noRowsFallback;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ??= true;\n  direction ??= 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [autoResizeColumn, setAutoResizeColumn] = useState<CalculatedColumn<R, SR> | null>(null);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight, isWidthInitialized] = useGridDimensions();\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      sortStatus,\n      checkboxFormatter\n    }),\n    [sortStatus, checkboxFormatter]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const { viewportColumns, flexWidthViewportColumns } = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    columnWidths,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onRowClickLatest = useLatestFunc(onRowClick);\n  const onRowDoubleClickLatest = useLatestFunc(onRowDoubleClick);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: minRowIdx, idx });\n  });\n  const selectTopSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = topSummaryRows!.indexOf(summaryRow);\n      selectCell({ rowIdx: rowIdx + minRowIdx + 1, idx: column.idx });\n    }\n  );\n  const selectBottomSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = bottomSummaryRows!.indexOf(summaryRow) + rows.length;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  );\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n      scrollIntoView(rowRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!isWidthInitialized || flexWidthViewportColumns.length === 0) return;\n\n    setColumnWidths((columnWidths) => {\n      const newColumnWidths = new Map(columnWidths);\n      const grid = gridRef.current!;\n\n      for (const column of flexWidthViewportColumns) {\n        const measuringCell = grid.querySelector(`[data-measuring-cell-key=\"${column.key}\"]`)!;\n        // Set the actual width of the column after it is rendered\n        const { width } = measuringCell.getBoundingClientRect();\n        newColumnWidths.set(column.key, width);\n      }\n\n      return newColumnWidths;\n    });\n  }, [isWidthInitialized, flexWidthViewportColumns, gridRef]);\n\n  useLayoutEffect(() => {\n    if (autoResizeColumn === null) return;\n    const measuringCell = gridRef.current!.querySelector(\n      `[data-measuring-cell-key=\"${autoResizeColumn.key}\"]`\n    )!;\n    const { width } = measuringCell.getBoundingClientRect();\n    setColumnWidths((columnWidths) => {\n      const newColumnWidths = new Map(columnWidths);\n      newColumnWidths.set(autoResizeColumn.key, width);\n      return newColumnWidths;\n    });\n    setAutoResizeColumn(null);\n    onColumnResize?.(autoResizeColumn.idx, width);\n  }, [autoResizeColumn, gridRef, onColumnResize]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn,\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R, SR>, width: number | 'max-content') => {\n      if (width === 'max-content') {\n        setAutoResizeColumn(column);\n        return;\n      }\n      setColumnWidths((columnWidths) => {\n        const newColumnWidths = new Map(columnWidths);\n        newColumnWidths.set(column.key, width);\n        return newColumnWidths;\n      });\n\n      onColumnResize?.(column.idx, width);\n    },\n    [onColumnResize]\n  );\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n    const { rowIdx } = selectedPosition;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx]) &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (\n        isGroupRow(row) &&\n        selectedPosition.idx === -1 &&\n        // Collapse the current group row if it is focused and is in expanded state\n        ((key === leftKey && row.isExpanded) ||\n          // Expand the current group row if it is focused and is in collapsed state\n          (key === rightKey && !row.isExpanded))\n      ) {\n        event.preventDefault(); // Prevents scrolling\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(gridRef.current?.querySelector('[tabindex=\"0\"]'));\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function scrollToColumn(idx: number): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (idx > lastFrozenColumnIndex) {\n      const { rowIdx } = selectedPosition;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      const sign = isRtl ? -1 : 1;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = (left - totalFrozenColumnWidth) * sign;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = (right - clientWidth) * sign;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getLayoutCssVars() {\n    if (autoResizeColumn === null && flexWidthViewportColumns.length === 0) return layoutCssVars;\n    const { gridTemplateColumns } = layoutCssVars;\n    const newSizes = gridTemplateColumns.split(' ');\n    if (autoResizeColumn !== null) {\n      newSizes[autoResizeColumn.idx] = 'max-content';\n    }\n    for (const column of flexWidthViewportColumns) {\n      newSizes[column.idx] = column.width as string;\n    }\n\n    return {\n      ...layoutCssVars,\n      gridTemplateColumns: newSizes.join(' ')\n    };\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = () => {\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges?: boolean) => {\n      if (commitChanges) {\n        updateRow(column, selectedPosition.rowIdx, row);\n        closeEditor();\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor();\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (\n      // idx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerRowsCount + topSummaryRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + topSummaryRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        rowRenderer(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex':\n            headerRowsCount + topSummaryRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onRowClick: onRowClickLatest,\n          onRowDoubleClick: onRowDoubleClickLatest,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectViewportCellLatest,\n          selectedCellDragHandle: getDragHandle(rowIdx),\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== -2;\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging,\n          [autosizeColumnsClassname]:\n            autoResizeColumn !== null || flexWidthViewportColumns.length > 0\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            selectedPosition.rowIdx >= 0 && selectedPosition.rowIdx < rows.length\n              ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...getLayoutCssVars()\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + 2\n          }}\n          onKeyDown={handleKeyDown}\n        />\n      )}\n      <DataGridDefaultComponentsProvider value={defaultGridComponents}>\n        <HeaderRow\n          columns={getRowViewportColumns(-1)}\n          onColumnResize={handleColumnResize}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={selectAllRowsLatest}\n          sortColumns={sortColumns}\n          onSortColumnsChange={onSortColumnsChangeLatest}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          selectedCellIdx={selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined}\n          selectCell={selectHeaderCellLatest}\n          shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n          direction={direction}\n        />\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + rowIdx + 1;\n              const summaryRowIdx = rowIdx + minRowIdx + 1;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={gridRowStart}\n                  key={rowIdx}\n                  rowIdx={rowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  lastTopRowIdx={topSummaryRowsCount - 1}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  selectCell={selectTopSummaryCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + topSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={headerRowsCount + topSummaryRowsCount + rowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={rowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  lastTopRowIdx={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  selectCell={selectBottomSummaryCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n\n        {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n        {renderMeasuringCells({ viewportColumns })}\n      </DataGridDefaultComponentsProvider>\n    </div>\n  );\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}