{"ast":null,"code":"import * as React from 'react';\nimport HeaderRow from './HeaderRow';\nimport TableContext from '../context/TableContext';\n\nfunction parseHeaderRows(rootColumns) {\n  var rows = [];\n\n  function fillRowCells(columns, colIndex) {\n    var rowIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0; // Init rows\n\n    rows[rowIndex] = rows[rowIndex] || [];\n    var currentColIndex = colIndex;\n    var colSpans = columns.filter(Boolean).map(function (column) {\n      var cell = {\n        key: column.key,\n        className: column.className || '',\n        children: column.title,\n        column: column,\n        colStart: currentColIndex\n      };\n      var colSpan = 1;\n      var subColumns = column.children;\n\n      if (subColumns && subColumns.length > 0) {\n        colSpan = fillRowCells(subColumns, currentColIndex, rowIndex + 1).reduce(function (total, count) {\n          return total + count;\n        }, 0);\n        cell.hasSubColumns = true;\n      }\n\n      if ('colSpan' in column) {\n        colSpan = column.colSpan;\n      }\n\n      if ('rowSpan' in column) {\n        cell.rowSpan = column.rowSpan;\n      }\n\n      cell.colSpan = colSpan;\n      cell.colEnd = cell.colStart + colSpan - 1;\n      rows[rowIndex].push(cell);\n      currentColIndex += colSpan;\n      return colSpan;\n    });\n    return colSpans;\n  } // Generate `rows` cell data\n\n\n  fillRowCells(rootColumns, 0); // Handle `rowSpan`\n\n  var rowCount = rows.length;\n\n  var _loop = function _loop(rowIndex) {\n    rows[rowIndex].forEach(function (cell) {\n      if (!('rowSpan' in cell) && !cell.hasSubColumns) {\n        // eslint-disable-next-line no-param-reassign\n        cell.rowSpan = rowCount - rowIndex;\n      }\n    });\n  };\n\n  for (var rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {\n    _loop(rowIndex);\n  }\n\n  return rows;\n}\n\nfunction Header(_ref) {\n  var stickyOffsets = _ref.stickyOffsets,\n      columns = _ref.columns,\n      flattenColumns = _ref.flattenColumns,\n      onHeaderRow = _ref.onHeaderRow;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      getComponent = _React$useContext.getComponent;\n\n  var rows = React.useMemo(function () {\n    return parseHeaderRows(columns);\n  }, [columns]);\n  var WrapperComponent = getComponent(['header', 'wrapper'], 'thead');\n  var trComponent = getComponent(['header', 'row'], 'tr');\n  var thComponent = getComponent(['header', 'cell'], 'th');\n  return /*#__PURE__*/React.createElement(WrapperComponent, {\n    className: \"\".concat(prefixCls, \"-thead\")\n  }, rows.map(function (row, rowIndex) {\n    var rowNode = /*#__PURE__*/React.createElement(HeaderRow, {\n      key: rowIndex,\n      flattenColumns: flattenColumns,\n      cells: row,\n      stickyOffsets: stickyOffsets,\n      rowComponent: trComponent,\n      cellComponent: thComponent,\n      onHeaderRow: onHeaderRow,\n      index: rowIndex\n    });\n    return rowNode;\n  }));\n}\n\nexport default Header;","map":{"version":3,"names":["React","HeaderRow","TableContext","parseHeaderRows","rootColumns","rows","fillRowCells","columns","colIndex","rowIndex","arguments","length","undefined","currentColIndex","colSpans","filter","Boolean","map","column","cell","key","className","children","title","colStart","colSpan","subColumns","reduce","total","count","hasSubColumns","rowSpan","colEnd","push","rowCount","_loop","forEach","Header","_ref","stickyOffsets","flattenColumns","onHeaderRow","_React$useContext","useContext","prefixCls","getComponent","useMemo","WrapperComponent","trComponent","thComponent","createElement","concat","row","rowNode","cells","rowComponent","cellComponent","index"],"sources":["C:/Users/kmath/Documents/Booz/nachoProblem/techx-project5/reactApp/savewaste/node_modules/rc-table/es/Header/Header.js"],"sourcesContent":["import * as React from 'react';\nimport HeaderRow from './HeaderRow';\nimport TableContext from '../context/TableContext';\n\nfunction parseHeaderRows(rootColumns) {\n  var rows = [];\n\n  function fillRowCells(columns, colIndex) {\n    var rowIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    // Init rows\n    rows[rowIndex] = rows[rowIndex] || [];\n    var currentColIndex = colIndex;\n    var colSpans = columns.filter(Boolean).map(function (column) {\n      var cell = {\n        key: column.key,\n        className: column.className || '',\n        children: column.title,\n        column: column,\n        colStart: currentColIndex\n      };\n      var colSpan = 1;\n      var subColumns = column.children;\n\n      if (subColumns && subColumns.length > 0) {\n        colSpan = fillRowCells(subColumns, currentColIndex, rowIndex + 1).reduce(function (total, count) {\n          return total + count;\n        }, 0);\n        cell.hasSubColumns = true;\n      }\n\n      if ('colSpan' in column) {\n        colSpan = column.colSpan;\n      }\n\n      if ('rowSpan' in column) {\n        cell.rowSpan = column.rowSpan;\n      }\n\n      cell.colSpan = colSpan;\n      cell.colEnd = cell.colStart + colSpan - 1;\n      rows[rowIndex].push(cell);\n      currentColIndex += colSpan;\n      return colSpan;\n    });\n    return colSpans;\n  } // Generate `rows` cell data\n\n\n  fillRowCells(rootColumns, 0); // Handle `rowSpan`\n\n  var rowCount = rows.length;\n\n  var _loop = function _loop(rowIndex) {\n    rows[rowIndex].forEach(function (cell) {\n      if (!('rowSpan' in cell) && !cell.hasSubColumns) {\n        // eslint-disable-next-line no-param-reassign\n        cell.rowSpan = rowCount - rowIndex;\n      }\n    });\n  };\n\n  for (var rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {\n    _loop(rowIndex);\n  }\n\n  return rows;\n}\n\nfunction Header(_ref) {\n  var stickyOffsets = _ref.stickyOffsets,\n      columns = _ref.columns,\n      flattenColumns = _ref.flattenColumns,\n      onHeaderRow = _ref.onHeaderRow;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      getComponent = _React$useContext.getComponent;\n\n  var rows = React.useMemo(function () {\n    return parseHeaderRows(columns);\n  }, [columns]);\n  var WrapperComponent = getComponent(['header', 'wrapper'], 'thead');\n  var trComponent = getComponent(['header', 'row'], 'tr');\n  var thComponent = getComponent(['header', 'cell'], 'th');\n  return /*#__PURE__*/React.createElement(WrapperComponent, {\n    className: \"\".concat(prefixCls, \"-thead\")\n  }, rows.map(function (row, rowIndex) {\n    var rowNode = /*#__PURE__*/React.createElement(HeaderRow, {\n      key: rowIndex,\n      flattenColumns: flattenColumns,\n      cells: row,\n      stickyOffsets: stickyOffsets,\n      rowComponent: trComponent,\n      cellComponent: thComponent,\n      onHeaderRow: onHeaderRow,\n      index: rowIndex\n    });\n    return rowNode;\n  }));\n}\n\nexport default Header;"],"mappings":"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"},"metadata":{},"sourceType":"module"}