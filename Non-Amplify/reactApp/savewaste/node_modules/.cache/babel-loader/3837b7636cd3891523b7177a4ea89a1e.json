{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertChildrenToData } from '../utils/legacyUtil';\n\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\n\n\nexport default function useTreeData(treeData, children, simpleMode) {\n  return React.useMemo(function () {\n    if (treeData) {\n      return simpleMode ? parseSimpleTreeData(treeData, _objectSpread({\n        id: 'id',\n        pId: 'pId',\n        rootPId: null\n      }, simpleMode !== true ? simpleMode : {})) : treeData;\n    }\n\n    return convertChildrenToData(children);\n  }, [children, simpleMode, treeData]);\n}","map":{"version":3,"names":["_objectSpread","React","convertChildrenToData","parseSimpleTreeData","treeData","_ref","id","pId","rootPId","keyNodes","rootNodeList","nodeList","map","node","clone","key","forEach","parentKey","parent","children","push","useTreeData","simpleMode","useMemo"],"sources":["C:/Users/kmath/Documents/Booz/nachoProblem/techx-project5/reactApp/savewaste/node_modules/rc-tree-select/es/hooks/useTreeData.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertChildrenToData } from '../utils/legacyUtil';\n\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\n\n\nexport default function useTreeData(treeData, children, simpleMode) {\n  return React.useMemo(function () {\n    if (treeData) {\n      return simpleMode ? parseSimpleTreeData(treeData, _objectSpread({\n        id: 'id',\n        pId: 'pId',\n        rootPId: null\n      }, simpleMode !== true ? simpleMode : {})) : treeData;\n    }\n\n    return convertChildrenToData(children);\n  }, [children, simpleMode, treeData]);\n}"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,0CAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,qBAAT,QAAsC,qBAAtC;;AAEA,SAASC,mBAAT,CAA6BC,QAA7B,EAAuCC,IAAvC,EAA6C;EAC3C,IAAIC,EAAE,GAAGD,IAAI,CAACC,EAAd;EAAA,IACIC,GAAG,GAAGF,IAAI,CAACE,GADf;EAAA,IAEIC,OAAO,GAAGH,IAAI,CAACG,OAFnB;EAGA,IAAIC,QAAQ,GAAG,EAAf;EACA,IAAIC,YAAY,GAAG,EAAnB,CAL2C,CAKpB;;EAEvB,IAAIC,QAAQ,GAAGP,QAAQ,CAACQ,GAAT,CAAa,UAAUC,IAAV,EAAgB;IAC1C,IAAIC,KAAK,GAAGd,aAAa,CAAC,EAAD,EAAKa,IAAL,CAAzB;;IAEA,IAAIE,GAAG,GAAGD,KAAK,CAACR,EAAD,CAAf;IACAG,QAAQ,CAACM,GAAD,CAAR,GAAgBD,KAAhB;IACAA,KAAK,CAACC,GAAN,GAAYD,KAAK,CAACC,GAAN,IAAaA,GAAzB;IACA,OAAOD,KAAP;EACD,CAPc,CAAf,CAP2C,CAcvC;;EAEJH,QAAQ,CAACK,OAAT,CAAiB,UAAUH,IAAV,EAAgB;IAC/B,IAAII,SAAS,GAAGJ,IAAI,CAACN,GAAD,CAApB;IACA,IAAIW,MAAM,GAAGT,QAAQ,CAACQ,SAAD,CAArB,CAF+B,CAEG;;IAElC,IAAIC,MAAJ,EAAY;MACVA,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAACC,QAAP,IAAmB,EAArC;MACAD,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBP,IAArB;IACD,CAP8B,CAO7B;;;IAGF,IAAII,SAAS,KAAKT,OAAd,IAAyB,CAACU,MAAD,IAAWV,OAAO,KAAK,IAApD,EAA0D;MACxDE,YAAY,CAACU,IAAb,CAAkBP,IAAlB;IACD;EACF,CAbD;EAcA,OAAOH,YAAP;AACD;AACD;AACA;AACA;AACA;;;AAGA,eAAe,SAASW,WAAT,CAAqBjB,QAArB,EAA+Be,QAA/B,EAAyCG,UAAzC,EAAqD;EAClE,OAAOrB,KAAK,CAACsB,OAAN,CAAc,YAAY;IAC/B,IAAInB,QAAJ,EAAc;MACZ,OAAOkB,UAAU,GAAGnB,mBAAmB,CAACC,QAAD,EAAWJ,aAAa,CAAC;QAC9DM,EAAE,EAAE,IAD0D;QAE9DC,GAAG,EAAE,KAFyD;QAG9DC,OAAO,EAAE;MAHqD,CAAD,EAI5Dc,UAAU,KAAK,IAAf,GAAsBA,UAAtB,GAAmC,EAJyB,CAAxB,CAAtB,GAI4BlB,QAJ7C;IAKD;;IAED,OAAOF,qBAAqB,CAACiB,QAAD,CAA5B;EACD,CAVM,EAUJ,CAACA,QAAD,EAAWG,UAAX,EAAuBlB,QAAvB,CAVI,CAAP;AAWD"},"metadata":{},"sourceType":"module"}