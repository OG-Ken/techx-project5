{"ast":null,"code":"/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @class */\nvar CognitoUserSession = /*#__PURE__*/function () {\n  /**\n   * Constructs a new CognitoUserSession object\n   * @param {CognitoIdToken} IdToken The session's Id token.\n   * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.\n   * @param {CognitoAccessToken} AccessToken The session's access token.\n   * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.\n   */\n  function CognitoUserSession(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        IdToken = _ref.IdToken,\n        RefreshToken = _ref.RefreshToken,\n        AccessToken = _ref.AccessToken,\n        ClockDrift = _ref.ClockDrift;\n\n    if (AccessToken == null || IdToken == null) {\n      throw new Error('Id token and Access Token must be present.');\n    }\n\n    this.idToken = IdToken;\n    this.refreshToken = RefreshToken;\n    this.accessToken = AccessToken;\n    this.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;\n  }\n  /**\n   * @returns {CognitoIdToken} the session's Id token\n   */\n\n\n  var _proto = CognitoUserSession.prototype;\n\n  _proto.getIdToken = function getIdToken() {\n    return this.idToken;\n  }\n  /**\n   * @returns {CognitoRefreshToken} the session's refresh token\n   */\n  ;\n\n  _proto.getRefreshToken = function getRefreshToken() {\n    return this.refreshToken;\n  }\n  /**\n   * @returns {CognitoAccessToken} the session's access token\n   */\n  ;\n\n  _proto.getAccessToken = function getAccessToken() {\n    return this.accessToken;\n  }\n  /**\n   * @returns {int} the session's clock drift\n   */\n  ;\n\n  _proto.getClockDrift = function getClockDrift() {\n    return this.clockDrift;\n  }\n  /**\n   * @returns {int} the computer's clock drift\n   */\n  ;\n\n  _proto.calculateClockDrift = function calculateClockDrift() {\n    var now = Math.floor(new Date() / 1000);\n    var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());\n    return now - iat;\n  }\n  /**\n   * Checks to see if the session is still valid based on session expiry information found\n   * in tokens and the current time (adjusted with clock drift)\n   * @returns {boolean} if the session is still valid\n   */\n  ;\n\n  _proto.isValid = function isValid() {\n    var now = Math.floor(new Date() / 1000);\n    var adjusted = now - this.clockDrift;\n    return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();\n  };\n\n  return CognitoUserSession;\n}();\n\nexport { CognitoUserSession as default };","map":{"version":3,"names":["CognitoUserSession","_temp","_ref","IdToken","RefreshToken","AccessToken","ClockDrift","Error","idToken","refreshToken","accessToken","clockDrift","undefined","calculateClockDrift","_proto","prototype","getIdToken","getRefreshToken","getAccessToken","getClockDrift","now","Math","floor","Date","iat","min","getIssuedAt","isValid","adjusted","getExpiration","default"],"sources":["C:/Users/kmath/Documents/Booz/nachoProblem/techx-project5/node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js"],"sourcesContent":["/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @class */\nvar CognitoUserSession = /*#__PURE__*/function () {\n  /**\n   * Constructs a new CognitoUserSession object\n   * @param {CognitoIdToken} IdToken The session's Id token.\n   * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.\n   * @param {CognitoAccessToken} AccessToken The session's access token.\n   * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.\n   */\n  function CognitoUserSession(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        IdToken = _ref.IdToken,\n        RefreshToken = _ref.RefreshToken,\n        AccessToken = _ref.AccessToken,\n        ClockDrift = _ref.ClockDrift;\n\n    if (AccessToken == null || IdToken == null) {\n      throw new Error('Id token and Access Token must be present.');\n    }\n\n    this.idToken = IdToken;\n    this.refreshToken = RefreshToken;\n    this.accessToken = AccessToken;\n    this.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;\n  }\n  /**\n   * @returns {CognitoIdToken} the session's Id token\n   */\n\n\n  var _proto = CognitoUserSession.prototype;\n\n  _proto.getIdToken = function getIdToken() {\n    return this.idToken;\n  }\n  /**\n   * @returns {CognitoRefreshToken} the session's refresh token\n   */\n  ;\n\n  _proto.getRefreshToken = function getRefreshToken() {\n    return this.refreshToken;\n  }\n  /**\n   * @returns {CognitoAccessToken} the session's access token\n   */\n  ;\n\n  _proto.getAccessToken = function getAccessToken() {\n    return this.accessToken;\n  }\n  /**\n   * @returns {int} the session's clock drift\n   */\n  ;\n\n  _proto.getClockDrift = function getClockDrift() {\n    return this.clockDrift;\n  }\n  /**\n   * @returns {int} the computer's clock drift\n   */\n  ;\n\n  _proto.calculateClockDrift = function calculateClockDrift() {\n    var now = Math.floor(new Date() / 1000);\n    var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());\n    return now - iat;\n  }\n  /**\n   * Checks to see if the session is still valid based on session expiry information found\n   * in tokens and the current time (adjusted with clock drift)\n   * @returns {boolean} if the session is still valid\n   */\n  ;\n\n  _proto.isValid = function isValid() {\n    var now = Math.floor(new Date() / 1000);\n    var adjusted = now - this.clockDrift;\n    return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();\n  };\n\n  return CognitoUserSession;\n}();\n\nexport { CognitoUserSession as default };"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,IAAIA,kBAAkB,GAAG,aAAa,YAAY;EAChD;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,kBAAT,CAA4BC,KAA5B,EAAmC;IACjC,IAAIC,IAAI,GAAGD,KAAK,KAAK,KAAK,CAAf,GAAmB,EAAnB,GAAwBA,KAAnC;IAAA,IACIE,OAAO,GAAGD,IAAI,CAACC,OADnB;IAAA,IAEIC,YAAY,GAAGF,IAAI,CAACE,YAFxB;IAAA,IAGIC,WAAW,GAAGH,IAAI,CAACG,WAHvB;IAAA,IAIIC,UAAU,GAAGJ,IAAI,CAACI,UAJtB;;IAMA,IAAID,WAAW,IAAI,IAAf,IAAuBF,OAAO,IAAI,IAAtC,EAA4C;MAC1C,MAAM,IAAII,KAAJ,CAAU,4CAAV,CAAN;IACD;;IAED,KAAKC,OAAL,GAAeL,OAAf;IACA,KAAKM,YAAL,GAAoBL,YAApB;IACA,KAAKM,WAAL,GAAmBL,WAAnB;IACA,KAAKM,UAAL,GAAkBL,UAAU,KAAKM,SAAf,GAA2B,KAAKC,mBAAL,EAA3B,GAAwDP,UAA1E;EACD;EACD;AACF;AACA;;;EAGE,IAAIQ,MAAM,GAAGd,kBAAkB,CAACe,SAAhC;;EAEAD,MAAM,CAACE,UAAP,GAAoB,SAASA,UAAT,GAAsB;IACxC,OAAO,KAAKR,OAAZ;EACD;EACD;AACF;AACA;EALE;;EAQAM,MAAM,CAACG,eAAP,GAAyB,SAASA,eAAT,GAA2B;IAClD,OAAO,KAAKR,YAAZ;EACD;EACD;AACF;AACA;EALE;;EAQAK,MAAM,CAACI,cAAP,GAAwB,SAASA,cAAT,GAA0B;IAChD,OAAO,KAAKR,WAAZ;EACD;EACD;AACF;AACA;EALE;;EAQAI,MAAM,CAACK,aAAP,GAAuB,SAASA,aAAT,GAAyB;IAC9C,OAAO,KAAKR,UAAZ;EACD;EACD;AACF;AACA;EALE;;EAQAG,MAAM,CAACD,mBAAP,GAA6B,SAASA,mBAAT,GAA+B;IAC1D,IAAIO,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,KAAa,IAAxB,CAAV;IACA,IAAIC,GAAG,GAAGH,IAAI,CAACI,GAAL,CAAS,KAAKf,WAAL,CAAiBgB,WAAjB,EAAT,EAAyC,KAAKlB,OAAL,CAAakB,WAAb,EAAzC,CAAV;IACA,OAAON,GAAG,GAAGI,GAAb;EACD;EACD;AACF;AACA;AACA;AACA;EATE;;EAYAV,MAAM,CAACa,OAAP,GAAiB,SAASA,OAAT,GAAmB;IAClC,IAAIP,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,KAAa,IAAxB,CAAV;IACA,IAAIK,QAAQ,GAAGR,GAAG,GAAG,KAAKT,UAA1B;IACA,OAAOiB,QAAQ,GAAG,KAAKlB,WAAL,CAAiBmB,aAAjB,EAAX,IAA+CD,QAAQ,GAAG,KAAKpB,OAAL,CAAaqB,aAAb,EAAjE;EACD,CAJD;;EAMA,OAAO7B,kBAAP;AACD,CAlFqC,EAAtC;;AAoFA,SAASA,kBAAkB,IAAI8B,OAA/B"},"metadata":{},"sourceType":"module"}